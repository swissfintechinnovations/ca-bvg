openapi: 3.0.1
info:
  version: 0.8.0
  title: Pension
  # yamllint disable rule:indentiation
  description: |
    # Pension-API (Deutsch)

    **** Deutsch (for English see below) ****

    Mit dem Pension-API können Daten zur versicherten Person und zur Police abgefragt werden.
    Dies umfasst vereinfacht gesagt die Daten, die auf dem Versicherungsausweis zu finden sind.
    Auch die Erstellung bzw. das Beziehen von bereits erstellten Versicherungsausweisen als PDF-Datei
    ist möglich. Des Weiteren gibt es Endpunkte zum Einkaufsprozess, für Simulationen und für Transaktionen.

    Als Einstieg fürs Pension-API wird eine technische Personen- oder Policen-ID benötigt.
    Dies wird vom Consent API geliefert.

    Die beiden wesentlichen Objekte dieses APIs sind *Person* und *Police*. Person bezieht sich
    immer auf eine natürliche Person, die bei einer Pensionskasse versichert ist.

    Die Police beschreibt den indirekten Versicherungsvertrag zwischen der versicherten Person
    (ArbeitnehmerIn) und der Pensionskasse. Ist eine Person über zwei Vorsorgepläne versichert,
    z.B. über einen Basis- und einen zusätzlichen Kaderplan, so hat sie zwei Policen.

    Wo es relevant ist, Angaben in den obligatorischen und den über-obligatorischen Teil
    aufzutrennen, wird jeweils das Total (obligatorisch plus über-obligatorisch) und der
    obligatorische Wert separat ausgewiesen. Falls der über-obligatorische Wert benötigt wird, muss
    er vom API-Konsumenten selbst berechnet werden (Differenz zwischen den beiden Werten).

    Ausgenommen davon sind Zinssätze und Umwandlungssätze. Hier werden entweder der obligatorische
    und der über-obligatorische Satz als zwei separate Werte geliefert, oder dann wird der
    umhüllende Satz geliefert.

    Das API umfasst auch die Simulation einer Änderung des Beschäftigtengrads und/oder Lohns. Die
    Simulation berechnet die Effekte auf die monatlichen Beiträge sowie auf die voraussichtlichen
    Rentenleistungen bei unterschiedlichem Penionierungsalter.

    Das Einkaufsendpunkte erlauben es, die Auswirkungen eines freiwilligen Einkaufs in die Pensionskasse
    zu simulieren und einen Einkauf zu starten.

    Die in dieser Spezifikation angegebenen URLs sind nur Beispiel-URLs. Das API wird von einer
    Vielzahl von Pensionskassen implementiert und jede Pensionskasse hat eine andere Basis-URL
    für das API. Die Basis-URL der jeweiligen Pensionskasse wird vom Directory API geliefert.


    ## Einkaufsprozess

    Für einen freiwilligen Einkauf gelten eine Reihe von gesetzlichen Voraussetzungen, die erfüllt
    sein müssen, z.B. dass WEF-Vorbezüge zurückgezahlt wurden. Deshalb besteht der Einkaufsprozess grob aus zwei Phasen:

    - Prüfung: In dieser Phase wird der Antrag geprüft und bei Bedarf weitere Unterlagen von der versicherten Person eingefordert.

    - Zahlung: Ist der Antrag bewilligt, so macht die versicherte Person eine oder mehrere Zahlungen.


    ## Einkaufsantrag

    Beim Einkaufsprozess wird im ersten Schritt ein Einkaufsantrag erstellt. Er repräsentiert den nach aussen
    sichtbaren Stand der Prozessinstanz. Der interne Prozess unterscheidet sich von Pensionskasse zu Pensionskasse
    und besteht aus viel mehr Schritten als von aussen sichtbar. Der Antrag kann folgende Zustände haben, die für
    die versicherte Person und im API sichtbar sind:

    - In Prüfung: Die Pensionskasse ist dabei, den Antrag zu prüfen. Dies ist der erste Zustand eines neuen Antrags.

    - Unterlagen erforderlich: Die Prüfung hat ergeben, dass die versicherte Person weitere Unterlagen einreichen oder
    direkt mit der Pensionskasse Kontakt aufnehmen muss.

    - Abgelehnt: Der Einkaufsantrag wurde abgelehnt. Dies ist ein Endzustand.

    - Bewilligt: Der Einkaufsantrag wurde bewilligt. Die versicherte Person kann nun die Zahlungen vornehmen
    (einmalige oder wiederkehrende).

    - Abgeschlossen: Der Einkaufsantrag ist abgeschlossen. Eine oder mehrere Zahlungen sind erfolgt, und es sind keine
    weiteren Zahlungen mehr möglich. Dies ist ein Endzustand.

    Der Antrag kann über das API abgefragt werden und hat neben dem Antragszustand noch viele weitere Attribute,
    z.B. die bewilligte Einkaufssumme, die Summe der erfolgten Zahlungen etc.


    ## Fragen im Einkaufsantrag

    Die Einkaufsprüfung ist massgeblich durch gesetzliche Regelungen bestimmt. Dennoch gibt es Unterschiede zwischen den
    Pensionskassen. Einige stellen mehr und präzisere Fragen, andere stellen weniger Fragen und fordern schneller nach
    zusätzlichen Dokumenten oder Kontaktaufnahme.

    Das API deckt dies ab, indem die Pensionskasse bestimmen kann, ob gewisse Fragen überhaupt gestellt werden. Diese
    Fragen sind in der Tabelle unten als Optional markiert. Optionale Fragen sind optional für die Pensionskasse. Wird
    die Frage angezeigt, muss die versicherte Person sie beantworten. Optionale Fragen können auch benutzt werden, um
    die Fragen für die versicherte Person zu individualisieren. So kann darauf verzichtet werden, nach laufenden Renten
    zu fragen, wenn die Person noch nicht 55 Jahre alt ist.

    Einige Fragen hängen von anderen Fragen ab, d.h. die Fragen sind nur zu beantworten, falls bei einer anderen Frage
    eine bestimmte Antwort gegeben wurde. Diese Abhängigkeiten sind in der Tabelle unten erwähnt.

    Bei einigen Fragen kann die Pensionskasse einen Wert vorgeben, z.B. eine bereits bekannte Emailadresse. Dieser Wert
    wird in das Antwortfeld eingefüllt und kann von der versicherten Person bei Bedarf geändert werden.

    | Nr. | Frage | Typ der Antwort | Bemerkungen |
    | --- | ----- | --------------- | ----------- |
    | 1   | **Betrag** | | |
    | 1a  | Welchen Betrag möchten Sie in die Pensionskasse einzahlen? | Betrag |  |
    | 2   | **Freizügigkeitskonten oder -policen** | | |
    | 2a  | Verfügen Sie über Guthaben auf Freizügigkeitskonten bei Banken, bei der Stiftung Auffangeinrichtungen oder auf Freizügigkeitspolicen? | Ja/Nein | |
    | 3   | **Selbständige Erwerbstätigkeit** | | |
    | 3a  | Waren Sie in der Vergangenheit je selbständig erwerbstätig und haben während dieser Zeit Beiträge zugunsten der Säule 3a einbezahlt? | Ja/Nein | |
    | 3b  | Wie hoch ist das Guthaben per 31.12. des letzten Jahrs? | Betrag | Optional. Nur fragen, falls Antwort auf Frage 3a “Ja” ist. |
    | 4   | **Wohneigentum** | | |
    | 4a  | Haben Sie bei früheren Pensionskassen oder von Freizügigkeitskonten/-policen Vorbezüge getätigt und diese noch nicht vollständig zurückbezahlt? | Ja/Nein | |
    | 5   | **Zuzug aus dem Ausland** | | |
    | 5a  | Sind Sie innerhalb der letzten 5 Jahre aus dem Ausland zugezogen? (gilt auch für Schweizer Staatsangehörige) | Ja/Nein | Optional. |
    | 5b  | Wann sind Sie zugezogen? | Datum | Optional. Nur fragen, falls Antwort auf Frage 5a “Ja” ist. |
    | 5c  | Waren Sie davor bereits bei einer Schweizer Vorsorgeeinrichtung versichert? | Ja/Nein | Optional. Nur fragen, falls Antwort auf Frage 5a “Ja” ist. |
    | 5d  | Wann sind Sie zum ersten Mal einer Schweizer Vorsorgeeinrichtung beigetreten? | Datum | Optional. Nur fragen, falls Antwort auf Frage 5a “Ja” ist. |
    | 6   | **Bezug Altersrente / Kapitalauszahlung** | | |
    | 6a  | Beziehen Sie von einer Pensionskasse eine Altersrente oder haben Sie sich bereits Alterskapital auszahlen lassen? | Ja/Nein | Optional. |
    | 7   | **Weitere Fragen zur Situation** | | |
    | 7a  | Sind Sie zusätzlich bei einer anderen Vorsorgeversicherung versichert? | Ja/Nein | Optional. |
    | 7b  | Sind Sie zu 100% arbeitsfähig? | Ja/Nein | Optional. |
    | 7c  | Handelt es sich beim Einkauf um einen Wiedereinkauf nach Ehescheidung oder nach gerichtlicher Auflösung einer eingetragenen Partnerschaft? | Ja/Nein | Optional. |
    | 7d  | Wird der Einkauf mit Geld aus der Säule 3a getätigt? | Ja/Nein | Optional. |
    | 8   | **Kontaktangaben** | | |
    | 8a  | Ist Ihre Adresse <adresse> korrekt? | Ja/Nein | Optional. Die Adresse wird von der Pensionskasse geliefert und muss im Text oder separat angezeigt werden. |
    | 8b  | Unter welcher Telefonnummer dürfen wir Sie bei Fragen kontaktieren? | Telefonnummer | Optional. |
    | 8c  | Über welche Emailadresse dürfen wir Sie bei Fragen kontaktieren? | Emailadresse | Optional. |


    ## Instruktionen an die versicherte Person

    Ergibt die Prüfung, dass weitere Unterlagen oder eine Kontaktaufnahme mit der Pensionskasse nötig sind, so können der
    versicherten Person entsprechende Instruktionen erteilt werden. Diese können von der Pensionskasse frei formuliert werden.

    Die Instruktionen bestehen aus einer Liste von Sätzen. Diese werden von der Applikation als unnummerierte Liste angezeigt, z.B:

    - *Der Einkaufsbetrag reduziert sich um die Höhe des Guthabens auf den Freizügigkeitskonti / -policen. Bitte senden Sie uns
    Kopien von Konto-/Policienauszügen, die den Stand per Ende letzten Jahres zeigen.*
    - *Senden Sie die Dokumente an: Personalfürsorge der Firma Heierli AG, Bahnhofstrasse 13, 9000 St. Gallen.*
    - *Alternativ können Sie die Dokumente an einkauf@heierli-pk.ch senden. Bitte beachten Sie, dass Emails einen Weg über Server
    im Ausland nehmen können und die Vertraulichkeit auf dem Weg nicht gewährt ist.*

    Sind weitere Unterlagen nötig, so müssen diese direkt an die Pensionskasse (und nicht über die Applikation) eingereicht werden.
    Entsprechend gibt es kein API dafür.


    ## Feedback an die versicherte Person

    In vielen Fällen ist die Antragsprüfung nicht automatisiert und sofort erledigt. Stattdessen dauert sie Stunden oder sogar einige
    Tage. Wenn das Ergebnis vorliegt, sollte der/die AntragsstellerIn benachrichtigt werden. Dazu nutzt die Pensionskasse direkte
    Kommunikationskanäle (Email, SMS, Telefonanruf etc.)

    Hat die App einen eigenen Kommunikationskanal mit der versicherten Person, so kann sie regelmässig prüfen, ob sich der Status des
    Antrags verändert hat und bei einer Änderung benachrichtigen. Dieser Kanal ist freiwillig und zusätzlich zur direkten Kommunikation
    zwischen Pensionskasse und versicherter Person.


    ## Zahlungen

    Wurde der Einkauf über einen bestimmten Betrag bewilligt, so kann der Betrag wie folgt überwiesen werden:

    - **Einmalige Einzahlung mit Einzahlungsschein (QR-Rechnung)**: Die Pensionskasse stellt die Zahlungsdaten (Adresse, Kontonummer,
    Referenznummer etc.) aus, die per API an die Applikation geliefert werden.

    - **Einmalige Einzahlung über eBill**: Die Pensionskasse sendet eine eBill ans eBill-Konto der versicherten Person.

    - **Regelmässige Einzahlungen per eBill**: Es wird ein Zahlungsrhythmus vereinbart, gemäss dem die Pensionskasse eBills ans
    eBill-Konto der versicherten Person sendet.

    - **Unregelmässige Einzahlungen per Einzahlungsschein (QR-Rechnung)**: Die Pensionskasse stellt die Zahlungsdaten (Adresse,
    Kontonummer, Referenznummer etc.) aus, die die Applikation nutzt, um Zahlungen auszulösen, z.B. über eine E-Banking-Schnittstelle.
    Es wird für alle Zahlungen die gleiche Referenznummer verwendet.

    Eine Pensionskasse muss nicht alle vier Zahlungsmethoden unterstützen. Die unterstützen Zahlungsmethoden können über das API
    abgefragt werden.


    ## Simulation

    Die Simulation berechnet, wie hoch das Altersguthaben und die Rente mit und ohne Einkauf sein wird. Dabei können verschiedene Parameter gewählt werden:

    - Einkaufssumme (gesamt)
    - Pensionierungsalter
    - Betrag pro Zahlung (bei mehreren Zahlungen)
    - Zahlungsperiodizität (bei mehreren Zahlungen)
    - Datum der (ersten) Zahlung

    Die Simulation geht davon aus, dass die gesetzlichen Voraussetzungen für den Einkauf gegeben sind. Sie prüft, dass der maximale Einkaufsbetrag nicht überschritten wird, und passt in bei Bedarf an.


    ## Kontobewegung

    Das Kontobewegungsendpunkte liefert die Kontobewegungen des Altersguthabens einer Police.


    # Pension API (English)

    **** English (für Deutsch siehe weiter oben) ****

    The Pension API serves to query details about the insured person and insurance policies.
    In simplified terms, this includes the data found on the insurance certificate.
    Additionally, policy statements can be generated or already generated statements can be
    retrieved as PDF files. There are also endpoints for the purchasing process, for simulations
    and for transactions.

    Person and policy IDs serve as the entry point for this API. They are provided by the
    Consent API.

    The two main objects are *person* and *policy*. A person refers to a natural person
    insured with a pension fund.

    A policy describes the indirect contractural relationship between the insured person
    (employee) and the pension fund. If a person is insured by two separate insurance plans,
    e.g. a basic and a supplementary executive plan, the person has two separate plans.

    If it is relevant to distinguish between the mandatory and the supplementary insurance
    coverage, a total value (mandatory and supplementary values combined) and a mandatory
    coverage value are provided seperately. If the value for the supplementary coverage is
    required, the API consumer must calculate it (difference between the two values).

    Interest and conversion rates are the exception to this rule. The pension fund either
    provides two separate values for the mandatory and the supplementary part, or  they
    provide a single enveloping value.

    The API also includes the simulation of a change of employment level and/or salary. It
    calculates the effects on the monthly contributions as well as the effects of the
    perspective pension benefits for different retirement ages.

    The Purchases endpoints can simulate the prospective effects of voluntary purchases of retirement
    benefits and initiate a purchase.

    The URLs in the specification are examples only. The API is implemented by a many
    pension funds and each pension fund has an individual base URL for the API.
    The base URL of a specific pension fund is provided by the directory API.


    ## Purchase Process

    In order to make a voluntary purchase a number of legal requirements must be fulfilled, e.g. early withdrawal of savings
    must have been paid back. Thus the purchase process consists of two phases:

    - Validation: In the first phase, the purchase application is validated and - if needed - additional documentation is requests from the insured person.

    - Payment: Once the application has been approved, the insured person makes one or several payments.


    ## Purchase Application

    The initial step of the purchase process is to create an application. It represent the externally visible state
    of the process instance. The internal process differs from pension fund to pension fund and likely consists
    of far more steps than are externally visible. The application can have the below states that are visible
    for the insured person and in the API:

    - In review: The pension fund is reviewing and validating the application. This is the initial state of a new application.

    - Input required: The validation requires the the insured person provides additional documents or contacts the pension fund directly.

    - Rejected: The application has been rejected. This is a final state.

    - Approved: The purchase application was approved. The insured person can now make payments (once or repeating).

    - Completed: The purchase application has been completed. One or more payments have been received, and no further payments
    are possible. This is a final state.

    The application can be queried using the API. It will return the application state and many additional attributes,
    such as the approved purchase amount, the amount of received payments.


    ## Purchase Questionnaire

    The purchase application validation is mainly governed by legal regulation. Nevertheless, there are differences between
    the pension funds. Some funds ask many precise questions while other funds ask few questions and quickly resort
    to requesting additional documents or direct contact.

    The API covers these differences as the pension fund can decide if certain questions are asked at all. These questions
    are marked as optional in the below table. Optional questions are optional for the pension fund. If the questions is
    displayed to the insured person, it must be answered. Optional questions can also be used to tailor the questionnaire
    to the insured person, e.g. by not asking whether the person is already drawing a pension if he/she is younger than 55.

    Some questions depend on the answer of other question, i.e. the question is only relevant if a certain answer has been
    given to a previous question. Such dependencies are mentioned in the below table.

    For certain questions, the pension fund can provide an initial value, e.g. an earlier provided email address. The answer field
    will be prefilled with this value and the insured person can change it if needed.

    | No  | Question | Answer type | Remark |
    | --- | ----- | --------------- | ----------- |
    | 1   | **Amount** | | |
    | 1a  | What amount of payment would you like to make towards the pension fund? | Amount |  |
    | 2   | **Pillar 2 Vested Benefits** | | |
    | 2a  | Do you have any additional pillar 2 claims from vested benefits accounts, vested benefits policies or at the Foundation of the BVG Contingency Fund? | Yes/No | |
    | 3   | **Self-employment** | | |
    | 3a  | Have you ever been self-employed and paid into pillar 3a during that time? | Yes/No | |
    | 3b  | What is the pillar 3a balance as of 31 December of last year? | Amount | Optional. Will only be asked if the answer for question 3a is 'Yes'. |
    | 4   | **Residental property** | | |
    | 4a  | Have you made an early withdrawal of pension savings to fund the purchase of residential property and have not fully paid it back? | Yes/No | |
    | 5   | **Move to Switzerland** | | |
    | 5a  | Have you moved to Switzerland from another country during the last 5 years? (applies to Swiss citizens as well) | Yes/No | Optional. |
    | 5b  | When have you moved to Switzerland? | Date | Optional. Will only be asked if answer to question 5a is 'Yes'. |
    | 5c  | Have you ever joined a Swiss pillar 2 pension plan before? | Yes/No | Optional. Will only be asked if answer to question 5a is 'Yes'. |
    | 5d  | When have you joined a Swiss pillar 2 pension plan for the first time? | Date | Optional. Will only be asked if answer to question 5a is 'Yes'. |
    | 6   | **Early retirement pension / savings capital withdrawal** | | |
    | 6a  | Are you drawing a retirement pension or have you ever withdrawn retirement savings capital from a pension fund? | Yes/No | Optional. |
    | 7   | **Additional question regarding the insured person** | | |
    | 7a  | Are you currently insured in an additional pension plan? | Yes/No | Optional. |
    | 7b  | Are you fully able for work? | Yes/No | Optional. |
    | 7c  | Is the purchase made to make up for the pension savings surrender due to a divorce or a dissolution of a civil partnership?? | Yes/No | Optional. |
    | 7d  | Is the purchase made with money originating from a pillar 3a account? | Yes/No | Optional. |
    | 8   | **Contact** | | |
    | 8a  | Is your address <adresse> correct? | Yes/No | Optional. The address will be provided by the pension fund and must be displayed in the question text or nearby on the screen. |
    | 8b  | What is your phone number to contact you in case of questions? | Phone number | Optional. |
    | 8c  | What is your email address to contact you in case of questions? | Email address | Optional. |


    ## Instructions for the Insured Person

    If the result of the initial review is that additional documents or direct contact with the pension fund is needed,
    such instructions can be given to the insured person. The pension fund can phrase the instructions according to their needs.

    Structurally, the instructions are a list of sentences. The application will display them as bullet list, e.g.:

    - *Your purchasing potential will be reduced by your further claims from pillar 2 (vested benefits account or policy). Please
    send us a copy of the current account statement for your vested benefit accounts.*
    - *Please send the documents to: Personalfürsorge der Firma Heierli AG, Bahnhofstrasse 13, 9000 St. Gallen.*
    - *Alternatively, you can send the documents to einkauf@heierli-pk.ch. Please not that emails can take a route via servers abroad,
    and confidentially on this path cannot be guaranteed.*

    If additional documents are required for the purchase, they must be sent directly to the pension fund (and not via the application).
    Thus, there is no API to upload documents.


    ## Feedback to the Insured Person

    In many cases, the application validation is not fully automated and not immediately done. Instead, it can last hours or even days.
    Once the result is ready, the insured person should be notified. The pension fund uses direct communication channels (email, short
    text messages, phone calls etc.) for this purpose.

    If an application has a communication channel to the insured person, it can regularly poll if the state of the purchase application
    has changed and notify the person about changes. Such a channel is voluntary and in addition to the direct communication between
    pension fund and insured person.


    ## Payments

    Once the voluntary purchase has been approved, the amount can paid in one four ways:

    - **Single payment using a payment slip (QR bill)**: The pension fund provides the payment details (address,
    account number, reference number etc.) via API to the application used by the insured person. He/she makes
    a payment using the provided data.

    - **Single payment by eBill**: The pension fund sends an eBill to the insured person's eBill account.
    The insured person provides the eBill email address via the API to the pension fund.

    - **Periodic payments by eBill**: The insured person chooses a payment periodicity, which is sent
    to the pension fund via the API. The pension fund will later send an eBill for each payment to
    the insured person's eBill account.

    - **Irregular payments using a payment slip (QR bill)**: The pension fund provides the payment details (address,
    account number, reference number etc.)  via API to the application. The application then triggers payments
    (e.g. via an E-Banking-API). All payments use the same reference number.

    A pension fund does not need to support a four payment methods. An application can query the supported methods
    with an API call.


    ## Simulation

    The simulation calculates the prospective retirement capital and pension with and without voluntary purchase.
    Several parameters of the simulation can be specified:

    - Purchase amount (total)
    - Pension age
    - Amount of individual payments (if several payments are made towards a purchase)
    - Payment frequency (if several payments are made towards a purchase)
    - Date of (first) payment

    The simulation assumes that the legal prerequisites for the purchase are fulfilled. It checks that the maximum purchase amount is not
    exceeded and modifies it if needed.


    ## Transactions

    The Transactions endpoints provide the transactions affecting the retirement capital of a policy.


    ### Glossar / Glossary

    Folgende englischen Begriffe werden im API verwendet / The following English terms are used in the API :

    - **Social Security Number (SSN)**: Sozialversicherungsnummer (SVN) - 13 stellige, Schweizer Sozialversicherungsnummer.
    - **Mandatory / supplementary coverage**: Obligatorischer / überobligatorische Anteil / Deckung
    - **Retirement benefits**: Versicherungsleistungen bei Pensionierung (Altersrente und Altersguthaben)
    - **Risk benefits**: Versicherungsleistungen bei Invalidität und Tod
    - **Enveloping interest/conversion rate**: Umhüllender Zinssatz / Umwandlungssatz
    - **Retirement capital**: Altersguthaben / Alterskapital
    - **Savings contribution**: Sparbeitrag (Beitrag an Altersgutben)
    - **Risk contribution**: Risikobeitrag (Beitrag für Leistungen bei Invalidität und Tod)
    - **Vested benefits**: Freizügigkeitsleistungen
  # yamllint enable rule:indentiation

  contact:
    email: info@common-api.ch

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://openpk.ch/v1
  
externalDocs:
  description: Find out more about SFTI API specifications
  url: https://www.common-api.ch

tags:
  - name: person
    description: Insured person
  - name: policy
    description: Pension fund policy
  - name: purchase
    description: Voluntary purchase simulation and operations
  - name: simulation
    description: Simulation of salary changes
  - name: transactions
    description: Retirement capital transactions

security:
  - bearerAuthentication: []

paths:
  /insured-persons/{personId}:
    get:
      summary: Get details of an insured person
      description: |
        Provides the details of the insured person, including name, address and
        additional data relevant in the Swiss social security system (birth date, sex etc.)
      operationId: getInsuredPerson
      tags:
        - person
      parameters:
        - name: personId
          in: path
          description: Technical person ID
          required: true
          schema:
            $ref: '#/components/schemas/personId'
      responses:
        '200':
          description: Details of insured person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/insuredPerson'
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid person ID / no authorization to access data
          content: {}

  /policies/{policyId}:
    get:
      summary: Get details of a pension fund policy
      description: |
        Provides extensive details about the insurance policy including current retirement capital,
        prospective pension benefits for different retirement ages, contributions to financing the
        insurance etc.
      operationId: getPolicy
      tags:
        - policy
      parameters:
        - name: policyId
          in: path
          description: Technical policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
      responses:
        '200':
          description: Policy details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/policy'
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid policy ID / no authorization to access data
          content: {}

  /policies/{policyId}/statement/recent:
    get:
      summary: Get the most recent policy statement
      description: |
        Provides the most recent policy statement as a PDF document
        in the insured person's preferred language.

        If possible, pension funds should provide a statement as of end of the
        last business day. At the minimum, they must provide the latest annual statement.
      operationId: getRecentPolicyStatement
      tags:
        - policy
      parameters:
        - name: policyId
          in: path
          description: Technical policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
      responses:
        '200':
          description: Binary PDF data of the policy statement
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid policy ID / no authorization to access data
          content: {}

  /policies/{policyId}/statement:
    post:
      summary: Get the policy statement for the specified date
      description: |
        Provides the policy statement representing the policy state for the specified date
        as a PDF document in the insured person's preferred language.

        If the pension fund is unable to provide a statement for the request date, the error
        code 400 should be returned.
      operationId: getPolicyStatementByDate
      tags:
        - policy
      parameters:
        - name: policyId
          in: path
          description: Technical policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
      requestBody:
        description: Reference date for information in generated document
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/referenceDate'
      responses:
        '200':
          description: Binary PDF data of the policy document
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid reference date (invalid format or unable to provide statement for the requested date)
          content: {}
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid policy ID / no authorization to access data
          content: {}

  /policies/{policyId}/salary-change-simulation:
    post:
      summary: Simulate effects of salary and employment level change
      description: |
        Simulates the effects of a salaray and/or employment level change on contributions
        and prospective retirement benefits. Prospective retirements benefits are calculated
        for retirement at the regular age as well as for multiple early retirement ages.
      operationId: simulateSalaryChange
      tags:
        - simulation
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
      requestBody:
        description: Salary change simulation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/salaryChangeSimParameters'
      responses:
        '200':
          description: Simulation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/salaryChangeSimResult'
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid policyId
          content: {}

  /policies/{policyId}/purchase-simulation:
    post:
      summary: Simulate effects of voluntary purchase
      description: |
        Simulates the financial effect of voluntary purchase of additional pension benefits
        for the provided parameters (retirement age, purchase amount etc.)

        If the specified purchase amount is higher the maximum allowed purchase amount, it will
        be reduced to the allowed amount. The simulation result contains the effective purchase amount.

        For periodic payments, the simulation assumes that the payments are made with the specified
        payment size and payment frequency until the maximum purchase amount has been exhausted or
        the retirement date has been reached (whichever is first).

        If the retirement date is reached before the purchase amount is exhausted, the returned effective
        purchase amount will be lower than both the requested and the maximum purchase amount.

        Using a very high amount (e.g. CHF 10 million), it is possible to query the maximum purchase
        amount and the maximum additional pension at once.
      operationId: simulatePurchase
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
      requestBody:
        description: Voluntary purchase simulation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/simulationParameters'
      responses:
        '200':
          description: Simulation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulationResult'
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid policyId
          content: {}

  /policies/{policyId}/purchases/template:
    get:
      summary: Retrieves a purchase request template
      description: |
        The template purchase request serves to retrieve the configuration
        and intial values for a new purchase request.
      operationId: getTemplatePurchaseRequest
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
      responses:
        '200':
          description: Purchase request with configuration and initial values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/purchaseRequest'
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId`
          content: {}

  /policies/{policyId}/purchases:
    get:
      summary: Query all purchase requests
      description: |
        Returns a list of all current and past purchase requests.
      operationId: listPurchaseRequest
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
      responses:
        '200':
          description: List of purchase requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/purchaseRequest'
                description: List of purchase requests
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId`
          content: {}

    post:
      summary: Submit a new purchase request
      description: |
        Submit a new purchase request for voluntary purchase of additional pension benefits.

        The submitted data must satisfy the requirements described above,
        in particular which questions require an answer.

        The response will contain an ID that can be used to query the submitted request in the future.
      operationId: submitPurchaseRequest
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
      requestBody:
        description: Voluntary purchase request details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/purchaseRequest'
      responses:
        '200':
          description: Updated voluntary purchase request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/purchaseRequest'
        '400':
          description: Some of the input is incomplete or invalid for starting a request
          content: {}
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId`
          content: {}

  /policies/{policyId}/purchases/{purchaseRequestId}:
    get:
      summary: Get purchase request
      description: |
        Retrieves the current state of the specified purchase request.
      operationId: getPurchaseRequest
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
        - name: purchaseRequestId
          in: path
          description: Purchase Request ID
          required: true
          schema:
            $ref: '#/components/schemas/purchaseRequestId'
      responses:
        '200':
          description: Vvoluntary purchase request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/purchaseRequest'
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId` or `purchaseRequestId`
          content: {}

    put:
      summary: Update purchase request.
      description: |
        Updates the insured person's input in the specified purchase request.

        Updates are usually on possible if the request is in the state `inputRequired`.
      operationId: updatePurchaseRequest
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
        - name: purchaseRequestId
          in: path
          description: Purchase Request ID
          required: true
          schema:
            $ref: '#/components/schemas/purchaseRequestId'
      requestBody:
        description: Voluntary purchase request details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/purchaseRequest'
      responses:
        '200':
          description: Updated voluntary purchase request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/purchaseRequest'
        '400':
          description: Some of the input is incomplete or invalid for starting a request
          content: {}
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId` or `purchaseRequestId`
          content: {}

  /policies/{policyId}/payment-methods:
    get:
      summary: Retrieves the available payment methods
      description: |
        Returns the list of methods available to make payments for
        a voluntary purchase of pension benefits.
      operationId: getPaymentMethods
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
      responses:
        '200':
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/paymentMethod'
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId`
          content: {}

  /policies/{policyId}/transactions:
    get:
      summary: Get the retirement capital transactions
      description: |
        Retrieves all transactions affecting the policy's retirement capital in the specified
        date range.

        The resulting transaction list is sorted in chronological order, starting with the oldest
        transaction. If several transactions occurred on the same date, they are ordered such that
        adding the transaction amount to the previous transactions balance results in the balance
        provided by the current transaction.

        The first transaction in the list is a pseudo transaction providing the carryover balance
        from the previous period. It is the only transaction with the category `carryover`.

        The `from` date must be before or be equal to the `to` date.

        The result contains a date range as well. It is usually equal to the request date range.
        However, if the requested `from` date is before the start of the policy or if the
        request `to` date is in the future, the date range may be adjusted to reflect the
        effective date range.
      operationId: getRetirementCapitalTransactions
      tags:
        - transactions
      parameters:
        - name: policyId
          in: path
          description: Technical policy ID
          required: true
          schema:
            $ref: '#/components/schemas/policyId'
        - name: from
          in: query
          description: Start of date range (inclusive)
          required: true
          schema:
            $ref: '#/components/schemas/date'
        - name: to
          in: query
          description: End of date range (inclusive)
          required: true
          schema:
            $ref: '#/components/schemas/date'
      responses:
        '200':
          description: Retirement capital transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transactions'
        '400':
          description: Invalid dates or date range
          content: {}
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid policy ID or insufficient rights to view policy
          content: {}

components:
  securitySchemes:
    bearerAuthentication:
      type: http
      description: Bearer access token in HTTP header
      scheme: bearer
      bearerFormat: JWT

  schemas:
    insuredPerson:
      type: object
      description: Details of insured person
      required:
        - personId
        - lastName
        - firstName
        - birthDate
        - sex
        - maritalStatus
        - ssn
      properties:
        personId:
          $ref: '#/components/schemas/personId'
        lastName:
          type: string
          description: Last name / family name
          example: "Doe"
        firstName:
          type: string
          description: First name(s)
          example: "John"
        address:
          $ref: '#/components/schemas/address'
        birthDate:
          $ref: '#/components/schemas/date'
          description: Birth date
        sex:
          type: string
          enum:
            - male
            - female
          description: |
            Sex:
            * `male`: male
            * `female`: female
          example: "male"
        maritalStatus:
          type: string
          enum:
            - single
            - married
            - divorced
            - widowed
            - registeredPartnership
            - dissolvedRegisteredPartnership
            - unknown
          description: |
            Marital status:
            * `single`: single
            * `married`: married
            * `divorced`: divorced
            * `widowed`: widowed
            * `registeredPartnership`: living in a registered partnership
            * `dissolvedRegisteredPartnership`: registered partnership has been dissolved
            * `unknown`: marital status is not known
          example: "married"
        marriageDate:
          $ref: '#/components/schemas/date'
          description: Date of marriage (or registration of partnership)
        ssn:
          type: integer
          format: int64
          description: Social security number
          example: 7561234567890
        policyIds:
          type: array
          items:
            $ref: '#/components/schemas/policyId'
          description: List of IDs of policies that insured person has with this pension fund
        disabilityDegree:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          description: |
            Degree (percent) of disability according to OASI (AHV/IV).
            If not specified, 0 is assumed.
          example: 0
        healthReservations:
          type: array
          items:
            $ref: '#/components/schemas/healthReservation'
          description: List of health reservations

    address:
      type: object
      description: Postal/residence address
      required:
        - street
        - town
        - postalCode
        - countryCode
      properties:
        street:
          type: string
          description: Street and house number
          example: "Brandstrasse 2"
        poBox:
          type: string
          description: PO box
          example: "PO Box 42"
        town:
          type: string
          description: Town
          example: "Unterbäch"
        postalCode:
          type: string
          description: Postal code
          example: "3944"
        countryCode:
          type: string
          pattern: '[A-Z]{2}'
          description: ISO country code
          example: "CH"

    pensionProvider:
      type: object
      description: Pension provider (foundation) administering the policy
      required:
        - providerName
      properties:
        providerId:
          type: string
          description: Swiss Enterprise Identification Number UID
          example: "CHE123456789"
        providerName:
          type: string
          description: The name of the pension provider
          example: "Omnifund"
        providerAddress:
          $ref: '#/components/schemas/address'
          description: Postal address of the pension provider
        portalUrl:
          type: string
          description: URL of the insurance portal of the pension fund
          example: "www.omnifund.ch"
        portalName:
          type: string
          description: Offical name of the insurance portal
          example: "Omni Portal"

    employer:
      type: object
      description: Details of the insured person's employer
      required:
        - name
      properties:
        employerId:
          type: string
          description: Swiss Enterprise Identification Number UID
          example: "CHE115873291"
        name:
          type: string
          description: The name of the employer
          example: "Acrea AG"
        industry:
          type: string
          description: The industry or sector the employer operates in
          example: "information technology and management consulting"

    pensionStatementBasic:
      type: object
      description: Basic, reduced pension statement consisting of only the most important information
      required:
        - personId
        - employer
        - pensionProvider
        - referenceDate
        - pensionStatementType
        - pensionPlans
        - ordinaryRetirementAge
        - earliestRetirementAge
        - salaryData
        - retirementCapital
        - riskBenefits
        - financing
        - regularPurchaseMaxAmount
        - homeOwnershipAvailableForWithdrawal
      properties:
        pensionStatementBasicId:
          $ref: '#/components/schemas/pensionStatementId'
        personId:
          $ref: '#/components/schemas/personId'
        employer:
          $ref: '#/components/schemas/employer'
        pensionProvider:
          $ref: '#/components/schemas/pensionProvider'
        pensionStatementNo:
          type: string
          description: Pension statement number (as printed on statement)
        referenceDate:
          $ref: '#/components/schemas/date'
          description: Reference date of pension statement.
        pensionStatementType:
          $ref: '#/components/schemas/pensionStatementType'
        entryDate:
          $ref: '#/components/schemas/date'
          description: Entry date into the pension fund
        pensionPlans:
          type: array
          description: List of related pension plans.
          items:
            $ref: '#/components/schemas/pensionPlan'
        ordinaryRetirementAge:
          type: integer
          format: int32
          description: Age for ordinary retirement
          example: 65
        earliestRetirementAge:
          type: integer
          format: int32
          description: Age for earliest possible retirement
          example: 58
        salaryData:
          $ref: '#/components/schemas/salaryData'
        retirementCapital:
          $ref: '#/components/schemas/retirementCapital'
        riskBenefits:
          $ref: '#/components/schemas/riskBenefits'
        financing:
          $ref: '#/components/schemas/financing'
        regularPurchaseMaxAmount:
          $ref: '#/components/schemas/regularPurchaseMaxAmount'
        homeOwnershipAvailableForWithdrawal:
          $ref: '#/components/schemas/homeOwnershipAvailableForWithdrawal'

    policy:
      type: object
      description: Details of policy
      required:
        - policyId
        - personId
        - pensionProvider
        - policyNo
        - entryDate
        - salaryData
        - retirementCapital
        - riskBenefits
        - financing
      properties:
        policyId:
          $ref: '#/components/schemas/policyId'
        personId:
          $ref: '#/components/schemas/personId'
        pensionProvider:
          $ref: '#/components/schemas/pensionProvider'
        policyNo:
          type: string
          description: Policy number (as printed on policy statements)
          example: "392'485'482"
        entryDate:
          $ref: '#/components/schemas/date'
          description: Entry date into policy
        contractNo:
          type: string
          description: Contract number of contract between employer and pension fund
          example: "C27-842.183"
        pensionPlan:
          $ref: '#/components/schemas/pensionPlan'
        isInVestedBenefitFoundation:
          type: boolean
          description: |
            Indicates if policy is part of a vested benefit foundation (as opposed to
            a regular pension fund with payments from an employer). If the field is not
            set, a regular pension fund is assumed.
          example: false
        salaryData:
          $ref: '#/components/schemas/salaryData'
        retirementCapital:
          $ref: '#/components/schemas/retirementCapital'
        riskBenefits:
          $ref: '#/components/schemas/riskBenefits'
        financing:
          $ref: '#/components/schemas/financing'
        vestedBenefits:
          $ref: '#/components/schemas/vestedBenefits'
        regularPurchaseMaxAmount:
          $ref: '#/components/schemas/regularPurchaseMaxAmount'
        homeOwnershipAvailableForWithdrawal:
          $ref: '#/components/schemas/homeOwnershipAvailableForWithdrawal'

    pensionPlan:
      type: object
      description: |
        The pension plan defines various conditions for the occupational pension provision
        of the insured employees, incl. the contributions and insured benefits.
      required:
        - planName
      properties:
        planName:
          type: string
          description: Insurance plan name
          example: "Basisplan"
        optionalSavingsPlanName:
          type: string
          description: Name of the optional savings plan
          example: "Sparplan 2"

    salaryData:
      type: object
      description: Details of salary relevant for insurance
      required:
        - declaredSalary
        - insuredSalaryMandatory
        - insuredSalaryRetirement
        - insuredSalaryRisk
        - employmentLevel
      properties:
        declaredSalary:
          type: number
          format: double
          description: Gross annual salary
          example: 78000.00
        bonus:
          type: number
          format: double
          description: Bonus component of the salary
          example: 0.00
        additionalSalary:
          type: number
          format: double
          description: Additional salary component
          example: 0.00
        otherSalaryComponent:
          type: number
          format: double
          description: Other salary component
          example: 0.00
        insuredSalaryMandatory:
          type: number
          format: double
          description: Annual salary insured under mandatory coverage
          example: 59215.00
        insuredSalaryRetirement:
          type: number
          format: double
          description: Annual salary insured for retirement benefits (mandatory and supplementary coverage)
          example: 59215.00
        insuredSalaryRisk:
          type: number
          format: double
          description: Annual salary insured for risk benefits (mandatory and supplementary coverage)
          example: 59215.00
        employmentLevel:
          type: number
          format: double
          description: Level of full-time/part-time employment (in percent, 100 for full-time employment)
          example: 100

    retirementCapital:
      type: object
      description: Retirement capital balances for the past and projections for the future
      required:
        - balanceReferenceDate
        - balanceMandatoryReferenceDate
        - projectedRetirementBenefits
        - interestRates
      properties:
        transferredCapital:
          type: number
          format: double
          description: Total retirement capital (mandatory and supplementary coverage) brought from other funds into this fund
          example: 45210.25
        transferredCapitalMandatory:
          type: number
          format: double
          description: Retirement capital under mandatory coverage brought from other funds into this fund
          example: 32840.55
        balanceReferenceDate:
          type: number
          format: double
          description: Retirement capital as per a specified reference date (mandatory and supplementary coverage)
          example: 53842.50
        balanceMandatoryReferenceDate:
          type: number
          format: double
          description: Retirement capital under mandatory coverage as per a specified reference date
          example: 38942.15
        balanceEndCurrentYear:
          type: number
          format: double
          description: Projected retirement capital as per end of the current year (mandatory and supplementary coverage)
          example: 56325.25
        balanceMandatoryEndCurrentYear:
          format: double
          type: number
          description: Projected retirement capital under mandatory coverage as per end of the current year
          example: 40846.60
        projectedRetirementBenefits:
          type: array
          description: |
            Projected retirement benefits for a series of retirement ages.
            The list contains projections for each integer retirement age from 58 to the
            regular retirement age. For persons of 58 or older, the list is restricted
            to retirement ages higher than their current age.
          items:
            $ref: '#/components/schemas/retirementBenefits'
        interestRates:
          $ref: '#/components/schemas/interestRates'

    retirementBenefits:
      type: object
      description: |
        Retirement benefits for retirement at the specified age.
        The conversion rate is mandatory: either the pair for mandatory and supplementary
        coverage is provided, or the enveloping conversion rate.
      required:
        - age
        - capitalBalance
        - capitalBalanceMandatory
        - pension
      properties:
        age:
          type: integer
          format: int32
          description: Specified age used for the retirement benefits calculation
          example: 63
        capitalBalance:
          type: number
          format: double
          description: Retirement capital balance with interest (mandatory and supplementary coverage)
          example: 378832.05
        capitalBalanceMandatory:
          type: number
          format: double
          description: Retirement capital balance with interest (mandatory coverage only)
          example: 284832.15
        capitalBalanceNoInterest:
          type: number
          format: double
          description: |
            Retirement capital balance assuming no interest on assets (mandatory
            and supplementary coverage)
          example: 331285.25
        capitalBalanceNoInterestMandatory:
          type: number
          format: double
          description: |
            Retirement capital balance assuming no interest on assets (mandatory coverage only)
          example: 248862.65
        pension:
          type: number
          format: double
          description: Annual pension credit
          example: 22835.00
        conversionRateMandatory:
          type: number
          format: double
          description: Conversion rate (capital to pension) for mandatory coverage
          example: 6.800
        conversionRateSupplementary:
          type: number
          format: double
          description: Conversion rate (capital to pension) for supplementary coverage
          example: 5.500
        conversionRateEnveloping:
          type: number
          format: double
          description: |
            Enveloping conversion rate (capital to pension) for combined mandatory and
            supplementary coverage
          example: 6.300

    interestRates:
      type: object
      description: |
        A set of interest rates applicable/applied to the retirement capital, including
        actual rates for mandatory and supplementary coverage and a projection rate for
        future value calculations.
      required:
        - interestRateMandatory
        - interestRateSupplementary
        - interestRateProjectionEnveloping
      properties:
        interestRateMandatory:
          type: number
          format: double
          description: Interest rate for mandatory coverage (in percent)
          example: 6.800
        interestRateSupplementary:
          type: number
          format: double
          description: Interest rate for supplementary coverage (in percent)
          example: 5.500
        interestRateProjectionEnveloping:
          type: number
          format: double
          description: |
            Projection enveloping interest rate for combined mandatory and supplementary coverage
            (in percent), used specifically for calculating projected future values.
          example: 6.300

    riskBenefits:
      type: object
      description: Benefits in case of death or disability to work
      required:
        - pensionDisability
        - childPensionDisability
        - partnerPensionDeath
        - orphanPensionDeath
        - minimalLumpSumWithPensionBenefits
      properties:
        pensionDisability: 
          type: number
          format: double
          description: Annual pension in case of disability
          example: 40213.00
        pensionDisabilityFromIllness:
          type: number
          format: double
          description: Annual pension in case of disability resulting from illness
          example: 40213.00
        pensionDisabilityFromAccident:
          type: number
          format: double
          description: Annual pension in case of disability resulting from accident
          example: 40213.00
        childPensionDisability:
          type: number
          format: double
          description: Annual child pension in case of disability
          example: 5382.00
        childPensionDisabilityFromIllness:
          type: number
          format: double
          description: Annual child pension in case of disability resulting from illness
          example: 5382.00
        childPensionDisabilityFromAccident:
          type: number
          format: double
          description: Annual child pension in case of disability resulting from accident
          example: 5382.00
        partnerPensionDeath:
          type: number
          format: double
          description: Annual partner pension in case of death
          example: 24817.00
        partnerPensionDeathFromIllness:
          type: number
          format: double
          description: Annual partner pension in case of death resulting from illness
          example: 24817.00
        partnerPensionDeathFromAccident:
          type: number
          format: double
          description: Annual partner pension in case of death resulting from accident
          example: 24817.00
        orphanPensionDeath:
          type: number
          format: double
          description: Annual orphan pension in case of death
          example: 5382.00
        orphanPensionDeathFromIllness:
          type: number
          format: double
          description: Annual orphan pension in case of death resulting from illness
          example: 5382.00
        orphanPensionDeathFromAccident:
          type: number
          format: double
          description: Annual orphan pension in case of death resulting from accident
          example: 5382.00
        lumpSumWithoutPensionBenefits:
          type: number
          format: double
          description: One-off payment in case of death where no other benefits are paid out
          example: 92834.00
        minimalLumpSumWithPensionBenefits:
          type: number
          format: double
          description: |
            Guaranteed, minimal one-off payment in case of death where other benefits are paid out
          example: 74383.00

    financing:
      type: object
      description: Contributions for financing the policy
      required:
        - contributionSavingsInsuredPerson
        - contributionSavingsEmployer
      properties:
        contributionSavingsInsuredPerson:
          type: number
          format: double
          description: Annual contribution towards the retirement captial financed by the insured person
          example: 4025.00
        contributionSavingsEmployer:
          type: number
          format: double
          description: Annual contribution towards the retirement captial financed by the employer
          example: 4025.00
        contributionRiskInsuredPerson:
          type: number
          format: double
          description: Annual contribution towards risk benefits financed by the insured person
          example: 0.00
        contributionRiskEmployer:
          type: number
          format: double
          description: Annual contribution towards risk benefits financed by the employer
          example: 0.00
        contributionAdministrationInsuredPerson:
          type: number
          format: double
          description: Annual contribution towards fund administration financed by the insured person
          example: 0.00
        contributionAdministrationEmployer:
          type: number
          format: double
          description: Annual contribution towards fund administration financed by the employer
          example: 0.00

    vestedBenefits:
      type: object
      description: Detail information about vested benefits
      properties:
        referenceDate:
          $ref: '#/components/schemas/date'
          description: Reference date of the vested benefit information.
        capitalAt50:
          type: number
          format: double
          description: |
            The insured person's retirement capital when he/she was 50 (mandatory and supplementary).
            Empty for persons younger than 50.
          example: 0.00
        capitalAt50Mandatory:
          type: number
          format: double
          description: |
            The insured person's retirement capital when he/she was 50 (mandatory part only).
            Empty for persons younger than 50.
          example: 0.00
        capitalAtMarriage:
          type: number
          format: double
          description: |
            The insured person's retirement capital before he/she got married or entered
            a registered partnership (mandatory and supplementary). Relevant is the last
            marriage or registered partnership (the marriage/partnership date is part of
            the insured person object.)
            Empty for persons who are not married or in a registered partnership.
          example: 28483.35
        capitalAtMarriageMandatory:
          type: number
          format: double
          description: |
            The insured person's retirement capital before he/she got married or entered
            a registered partnership (mandatory part only). Relevant is the last
            marriage or registered partnership (the marriage/partnership date is part of
            the insured person object.)
            Empty for persons who are not married or in a registered partnership.
          example: 23863.15
        capitalFirstCommunicated:
          type: number
          format: double
          description: |
            Vested benefit capital that has been initially communicated or had become due
            after January 1, 1995 (for insured persons having married before January 1, 1995).
          example: 0.00
        capitalFirstCommunicatedDate:
          $ref: '#/components/schemas/date'
          description: |
            Date when vested benefit capital has been initially communicated or had become due
            after January 1, 1995 (for insured persons having married before January 1, 1995).
        voluntaryPurchases:
          type: array
          items:
            $ref: '#/components/schemas/capitalTransaction'
          description: |
            List of voluntary purchases of additional pension benefits made in the past.
            At least the purchases of the last 3 years must be included. They can be
            aggregated by calendar year.
        homeOwnerhsipWithdrawals:
          type: array
          items:
            $ref: '#/components/schemas/capitalTransaction'
          description: |
            List of withdrawls and refunds for home ownership promotion made in the past.
        divorceWithdrawals:
          type: array
          items:
            $ref: '#/components/schemas/capitalTransaction'
          description: |
            List of withdrawls and refunds due to divorce made in the past.
        pledges:
          type: array
          items:
            $ref: '#/components/schemas/pledge'
          description: |
            List of pledges of parts of the retirement capital.

    capitalTransaction:
      type: object
      description: |
        Capital transaction made by the insured persons. It includes volunatry purchases,
        withdrawals for and refunds of home ownerhsip promotion, withdrawals or refunds due to divorce.
      required:
        - date
        - amount
        - amountMandatory
      properties:
        date:
          $ref: '#/components/schemas/date'
          description: Date of transaction
        amount:
          type: number
          format: double
          description: |
            Total transaction amount for mandatory and supplementary part.
            The amount is positive for payments towards the capital, and negative for withdrawals.
          example: 0.00
        amountMandatory:
          type: number
          format: double
          description: |
            Transaction amount for mandatory part only.
            The amount is positive for payments towards the capital, and negative for withdrawals.
          example: 0.00

    regularPurchaseMaxAmount:
      type: number
      format: double
      description: |
        The maximum amount the insured person is permitted to contribute to their pension plan
        as an ordinary purchase.
      example: 48392.45

    homeOwnershipAvailableForWithdrawal:
      type: number
      format: double
      description: |
        The total amount available for the insured person to withdraw or borrow against from their retirement capital for the purpose of financing home ownership.
      example: 31000.00

    healthReservation:
      type: object
      description: |
        Period of health reservation.
      required:
        - startDate
      properties:
        startDate:
          $ref: '#/components/schemas/date'
          description: Start date of health reservation
        endDate:
          $ref: '#/components/schemas/date'
          description: |
            End date of health reservation.
            If no end date is specified, the health reservation is currently still in force.

    pledge:
      type: object
      description: |
        Details about pledged capital.
      properties:
        amount:
          type: number
          format: double
          description: |
            Amount of retirement capital used for pledging (mandatory and supplementary).
          example: 20000.00
        amountMandatory:
          type: number
          format: double
          description: |
            Amount of retirement capital used for pledging (mandatory part only).
          example: 20000.00
        pledgee:
          type: string
          description: The name of the pledgee.
          example: "UBS AG"
        pledgeeAddress:
          $ref: '#/components/schemas/address'

    referenceDate:
      type: object
      description: Reference date for information in generated document
      required:
        - referenceDate
      properties:
        referenceDate:
          $ref: '#/components/schemas/date'

    personId:
      type: string
      pattern: '[A-Za-z0-9_\-.~]{1,64}'
      description: Technical ID of insured person used in API calls
      example: "JohnDoe_1234"

    policyId:
      type: string
      pattern: '[A-Za-z0-9_\-.~]{1,64}'
      description: Technical ID of policy used in API calls
      example: "Pol_56789-2024"

    pensionStatementId: 
      type: string
      pattern: '[A-Za-z0-9_\-.~]{1,64}'
      description: Technical ID of pension statement used in API calls
      example: "PS_ID_6789-ABC"

    pensionStatementType:
      type: string
      enum:
        - regular
        - simulated
      description: |
            pension statement type:
            * `regular`: the pension statement is an offical, regular statement on the basis of real values (not changed for simulation purposes)
            * `simulated`: the pension statement is a non-offical, simulated statement, i.e. some values might have been changed for simulation purposes
      example: "regular"

    salaryChangeSimParameters:
      type: object
      description: Salary change simulation parameters
      required:
        - declaredSalary
        - employmentLevel
      properties:
        declaredSalary:
          type: number
          format: double
          description: Changed gross annual salary in CHF (for employment level 100%)
          example: 80000
        employmentLevel:
          type: number
          format: double
          description: Changed level of full-time/part-time employment (in percent, 100 for full-time employment)
          example: 80
        effectiveDate:
          $ref: '#/components/schemas/date'
          description: |
            Date when the salary change takes effect.
            If omitted: tomorrow.

    salaryChangeSimResult:
      type: object
      description: Financial effect of voluntary purchase
      required:
        - salaryData
        - projectedRetirementBenefits
        - financing
      properties:
        salaryData:
          $ref: '#/components/schemas/salaryData'
        projectedRetirementBenefits:
          type: array
          description: |
            Projected retirement benefits for a series of retirement ages.
            The list contains projections for each integer retirement age from 58 to the
            regular retirement age. For persons of 58 or older, the list is restricted
            to retirement ages higher than their current age.
          items:
            $ref: '#/components/schemas/retirementBenefits'
        financing:
          $ref: '#/components/schemas/financing'

    simulationParameters:
      type: object
      description: Voluntary purchase simulation parameters
      required:
        - totalAmount
      properties:
        totalAmount:
          type: number
          description: |
            Purchase amount in CHF.
            For periodic purchases, the sum of all payments.
          example: 10000.00
        retirementAge:
          type: integer
          description: |
            Planned retirement age.
            If omitted, the regular payment age is assumed.
          example: 65
        date:
          $ref: '#/components/schemas/date'
          description: |
            Date of the (first) payments.
            If omitted: tomorrow.
        paymentSize:
          type: number
          description: |
            The size of individual periodic payments.
            If omitted, 0 or equal to 'amount', a one-time payment is assumed.
          example: 10000.00
        paymentFrequency:
          $ref: '#/components/schemas/paymentFrequency'

    simulationResult:
      type: object
      description: Financial effect of voluntary purchase
      required:
        - maxAmount
        - amount
        - retirementAge
        - capitalWithoutPurchase
        - capitalWithPurchase
        - pensionWithoutPurchase
        - pensionWithPurchase
      properties:
        maxAmount:
          type: number
          description: Maximum allowed amount of voluntary purchase of additional pension benefits (in CHF)
          example: 48392.45
        amount:
          type: number
          description: Effective amount of voluntary purchase (in CHF)
          example: 10000.00
        retirementAge:
          type: integer
          description: Retirement age assumed for simulation
          example: 65
        capitalWithoutPurchase:
          type: number
          description: Prospective savings capital at retirement without purchase (in CHF)
          example: 378832.05
        capitalWithPurchase:
          type: number
          description: Prospective savings capital at retirement with purchase (in CHF)
          example: 390216.55
        pensionWithoutPurchase:
          type: number
          description: Prospective pension after retirement without purchase (in CHF per year)
          example: 22835.00
        pensionWithPurchase:
          type: number
          description: Prospective pension after retirement with purchase (in CHF per year)
          example: 23517.00

    purchaseRequest:
      type: object
      description: |
        The *Purchase Request* object is the main data structure exchanged between application and pension fund
        during the voluntary purchase process. It is updated by the the application and the pension fund.

        The application updates:
        - purchaseDetails
        - paymentSchedule

        The pension fund updates:
        - id
        - status
        - purchaseDetails
        - requiredPurchaseDetails
        - instructions
        - paymentInstructions
        - paymentsReceived

        The application should omit the above fields. If they are part of a REST request, the pension fund
        will silently ignore them.

        The application may only update the purchase request on creation and if it is in status `inputRequired`.

        The pension fund will not update `purchaseDetails` except for minor cleanup (e.g. removing trailing whitespace)
        that does not alter the insured person's input materially. The only exception is the purchase amount, which may
        be lowered to maximum allowed amount.
      properties:
        id:
          $ref: '#/components/schemas/purchaseRequestId'
        status:
          type: string
          description: |
            Request status (set and updated by pension fund):
            * `inReview` - Request was submitted and is in review
            * `inputRequired` - Request requires additional input from insured person
            * `rejected` - Request was rejected
            * `approved` - Request was approved and is open for payments
            * `completed` - Payment has been received and request is complete
          enum:
            - inReview
            - inputRequired
            - rejected
            - approved
            - completed
          example: inReview
        purchaseDetails:
          $ref: '#/components/schemas/purchaseDetails'
        requiredPurchaseDetails:
          $ref: '#/components/schemas/requiredPurchaseDetails'
        instructions:
          $ref: '#/components/schemas/instructions'
        paymentSchedule:
          $ref: '#/components/schemas/paymentSchedule'
        paymentInstructions:
          $ref: '#/components/schemas/paymentInstructions'
        paymentsReceived:
          type: number
          format: double
          minimum: 0
          description: Total amount of payments received (in CHF)
          example: 10000.00

    purchaseDetails:
      type: object
      description: |
        Input from the insured person regarding the purchase request. These are the answers to the questions
        described in detail in the introduction to this API. Most of the questions and answers are required to
        ensure the purchase amount does not exceed the maximum allowed amount.

        Some questions and answers are optional (in the sense that the pension fund does not want to ask them).
        Optional questions are not displayed to the insured person and the answer can be omitted. The question
        configuration depends on the pension fund and on the specific policy and can be found in the
        `requiredPurchaseDetails` property.

        The pension fund may set some of the properties when the empty purchase request is queried. These values
        should be used as the initial values.
      properties:
        amount:
          type: number
          format: double
          minimum: 1
          description: |
            Answer to question 1a: Requested purchase amount in CHF
          example: 10000.00
        hasVestedBenefits:
          type: boolean
          description: |
            Answer to question 2a: Indicates if the insured person has pillar 2 vested benefits outside the pension fund (`true`) or not (`false`)
          example: false
        hasMadeSelfEmployedContributions:
          type: boolean
          description: |
            Answer to question 3a: Indicates if the insured person has made pillar 3a contributions while being self-employed (`true`) or not (`false`)
          example: false
        selfEmployedContributionCredit:
          type: number
          format: double
          minimum: 1
          description: |
            Answer to question 3b: Balance of pillar 3a credit as of the end of last year
          example: 35000.00
        hasNotRepaidEarlyWithdrawal:
          type: boolean
          description: |
            Answer to question 4a: Indicates if the insured person has made an early withdrawal of savings to fund the purchase of residential property and has not repaid it fully (`true`) or not (`false`)
          example: false
        hasMovedFromAbroad:
          type: boolean
          description: |
            Answer to question 5a: Indicates if the insured person has moved to Switzerland from abroad during the last 5 years (`true`) or not (`false`)
          example: false
        moveFromAbroadDate:
          $ref: '#/components/schemas/date'
          description: |
            Answert to question 5b: Date of move from another country to Switzerland
        hasBeenInsuredBefore:
          type: boolean
          description: |
            Answer to question 5c: Indicates if the person has been insured in the Swiss pension system before (`true`) or not (`false`)
          example: false
        firstInsuranceDate:
          $ref: '#/components/schemas/date'
          description: |
            Answert to question 5d: First entry date into the Swiss pension system
        isDrawingPensionBenefits:
          type: boolean
          description: |
            Answer to question 6a: Indicates if the insured person is already drawing or has ever drawn retirement benefits under another pension plan (`true`) or not (`false`)
          example: false
        isInAnotherPensionPlan:
          type: boolean
          description: |
            Answer to question 7a: Indicates if the person is insured in another pension plan (`true`) or not (`false`)
          example: false
        isFullyAbleToWork:
          type: boolean
          description: |
            Answer to question 7b: Indicates if the person is fully able to work (`true`) or not (`false`)
          example: true
        isPurchaseAfterDivorce:
          type: boolean
          description: |
            Answer to question 7c: Indicates if the purchase is to make up for the pension savings surrender due to a divorce (`true`) or not (`false`)
          example: false
        isPurchaseWithPillar3aSavings:
          type: boolean
          description: |
            Answer to question 7d: Indicates if the purchase is made with funds from a pillar 3a pension plan (`true`) or not (`false`)
          example: false
        isAddressUpToDate:
          type: boolean
          description: |
            Answer to question 8a: Indicates if the postal address is up-to-date (`true`) or not (`false`)
          example: true
        phoneContact:
          type: string
          description: |
            Answer to question 8b: Phone number to contact the insured person regarding the purchase request
          example: "0041 79 123 45 67"
        emailContact:
          type: string
          description: |
            Answer to question 8c: Email address to contact the insured person regarding the purchase request
          example: "johndoe@gmail.com"

    requiredPurchaseDetails:
      type: object
      description: |
        Provides the configuration regarding which questions should be displayed/asked and additional data required for the questions.
      properties:
        askForSelfEmployedContributionCredit:
          type: boolean
          description: Indicates if question 3b is to be asked
          example: true
        askForHasMovedFromAbroad:
          type: boolean
          description: Indicates if question 5a is to be asked
          example: true
        askForMoveFromAbroadDate:
          type: boolean
          description: Indicates if question 5b is to be asked
          example: true
        askForHasBeenInsuredBefore:
          type: boolean
          description: Indicates if question 5c is to be asked
          example: true
        askForFirstInsuranceDate:
          type: boolean
          description: Indicates if question 5d is to be asked
          example: true
        askForIsDrawingPensionBenefits:
          type: boolean
          description: Indicates if question 6a is to be asked
          example: true
        askFoIsInAnotherPensionPlan:
          type: boolean
          description: Indicates if question 7a is to be asked
          example: true
        askForIsFullyAbleToWork:
          type: boolean
          description: Indicates if question 7b is to be asked
          example: true
        askForIsPurchaseAfterDivorce:
          type: boolean
          description: Indicates if question 7c is to be asked
          example: true
        askForIsPurchaseWithPillar3aSavings:
          type: boolean
          description: Indicates if question 7d is to be asked
          example: true
        askForIsAddressUpToDate:
          type: boolean
          description: Indicates if question 8a (postal address is up-to-date) is to be asked
          example: true
        postalAddress:
          type: string
          description: |
            The current postal address on file.

            The address should be formatted in a human-readable form, ready to be displayed in the question sentence.
            Street, postal code and city, country etc. should be separated with comma and space; no newlines must be used.
          example: "Brandstrasse 2, 3944 Unterbäch"
        askForPhoneContact:
          type: boolean
          description: Indicates if question 8b is to be asked
          example: true
        askForEmailContact:
          type: boolean
          description: Indicates if question 8c is to be asked
          example: true

    paymentSchedule:
      type: object
      description: |
        Desired payment method and payment schedule.

        `eBillAccount` is required if eBill payment method is chosen
        (`paymentMethod` = `singlePaymentEBill` or `paymentMethod` = `regularPaymentEBill`)

        `paymentFrequency` and `paymentSize` are required if regular payments is chosen
        (`paymentMethod` = `regularPaymentEBill`). Otherwise, they are ignored.

        `paymentFrequency` = 1 is invalid. Instead, one of the one-time payment methods
        should be chosen and the `paymentFrequency` property omitted.
      required:
        - paymentMethod
      properties:
        paymentMethod:
          $ref: '#/components/schemas/paymentMethod'
        paymentFrequency:
          $ref: '#/components/schemas/paymentFrequency'
        paymentSize:
          type: number
          format: double
          description: |
            Size (in CHF) of individual regular payments.
          example: 500.00
        eBillAcount:
          type: string
          description: Email address of insured person's eBill account.
          example: "johndoe@gmail.com"

    paymentInstructions:
      type: object
      description: |
        Payment instructions for to insured person to make the payment. This information will only be provided
        if the request has the state `approved` and a QR bill related payment methode has been chosen
        (`paymentMethod` = `singlePaymentQrBill` or `paymentMethod` = `irreularPaymentQrBill`).
      properties:
        qrBillText:
          type: string
          description: |
            Text that is embedded in the QR code of a QR bill. It contains the relevant payment information
            including creditor, account number and payment reference.

            See chapter 4 'Swiss QR Code database' in
            [SIX - Swiss Implementation Guidelines QR-bill (PDF, English)](https://www.paymentstandards.ch/dam/downloads/ig-qr-bill-de.pdf) or
            [SIX - Schweizer Implementation Guidelines QR-Rechnung (PDF, German)](https://www.paymentstandards.ch/dam/downloads/ig-qr-bill-de.pdf).
          example: >
            SPC
            0200
            1
            CH4431999123000889012
            S
            Max Muster & Söhne
            Musterstrasse
            123
            8000
            Seldwyla
            CH
            
            0.00
            CHF
            S
            Simon Muster
            Musterstrasse
            1
            8000
            Seldwyla
            CH
            QRR
            210000000003139471430009017
            DO NOT USE FOR PAYMENT
            EPD

    instructions:
      type: array
      description: |
        The instructions are a list of sentences that inform the insured person either about the next steps in the process
        that are likely to happen, or - in particular in case of status `inputRequired` - about the steps the insured
        person should take.

        Instructions should be displayed in a bullet list, each array item becoming a list item.
      items:
        description: A single instruction, display as an item in a bullet list.
        type: string

    paymentMethod:
      type: string
      description: |
        Request status (set and updated by pension fund):
        * `singlePaymentQrBill` - A single payment must be made using the provided payment information (account number, reference no)
        * `singlePaymentEBill` - The pension fund will send a single eBill to the insured person's eBill account
        * `regularPaymentEBill` - The pension fund will send eBills to the insured person's eBill account according to the requested installments
        * `irreularPaymentQrBill` - Many payments can be made using the provided payment information (account number, reference no)
      enum:
        - singlePaymentQrBill
        - singlePaymentEBill
        - regularPaymentEBill
        - irreularPaymentQrBill
      example: singlePaymentQrBill

    paymentFrequency:
      type: integer
      description: |
        Number of payments per year.
        Possible values:
        * 0: One-time payment
        * 1: Annual payment
        * 2: Semi-annual payment
        * 4: Quarterly payment
        * 12: Monthly payment
      example: 0

    purchaseRequestId:
      type: string
      pattern: '[A-Za-z0-9_\-.~]{1,64}'
      description: Technical ID of purchase request used in API calls
      example: "PR-4838525"

    transactions:
      type: object
      description: Retirement capital transactions
      required:
        - transaction
        - from
        - to
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/transaction'
          description: Chronologically sorted list of transactions
        from:
          $ref: '#/components/schemas/date'
          description: Start of date range (inclusive)
        to:
          $ref: '#/components/schemas/date'
          description: End of date range (inclusive)

    transaction:
      type: object
      description: Transaction affecting the retirement capital.
      required:
        - category
        - date
        - amount
        - reason
        - balance
      properties:
        id:
          type: string
          description: Transaction ID
        category:
          type: string
          description: |
            Transaction category:
            * `carryover`: Pseudo transaction to provide the carryover from the preceding period
            * `transfer`: Transfer in and out of the fund (related to an start and end of employment)
            * `employeeContribution`: Employee contribution as part of salary payment
            * `employerContribution`: Employer contribution as part of salary payment
            * `homeOwnershipEncouragement`: Transaction related to home ownerhsip encouragement scheme
            * `voluntaryPurchase`: Transaction related to voluntary purchse of retirement benefits
            * `securityInvestment`: Transaction related to a security investment or deinvestment
            * `dividend`: Transaction related to payouts/distributions from security investments
            * `fee`: Transaction related to fees
            * `other`: Other reason for transaction not listed above
          enum:
            - carryover
            - transfer
            - employeeContribution
            - employerContribution
            - homeOwnershipEncouragement
            - voluntaryPurchase
            - securityInvestment
            - dividend
            - fee
            - other
          example: voluntaryPurchase
        date:
          $ref: '#/components/schemas/date'
          description: Transaction date (date the transaction becomes effective financially)
        amount:
          type: number
          description: Transaction amount (in CHF, positive numbers for credits, negative numbers for debits)
          example: 10000.00
        reason:
          type: string
          description: |
            A human-readable description of the transaction reason, in the insured person's
            preferred language.
          example: "Freiwilliger Einkauf"
        balance:
          type: number
          format: double
          description: Retirement capital balance after transaction
          example: 63842.50

    # ---- Common Data Model ----
    date:
      type: string
      format: date
      example: 2018-04-13
