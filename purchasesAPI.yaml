openapi: 3.0.1
info:
  title: Voluntary Purchase
  version: 0.6.1-beta
  description: |

    # Einkaufs-API (deutsch)
    
    **** Deutsch (for English see below) ****
    
    
    Das Einkaufs-API erlaubt es, die Auswirkungen eines freiwilligen Einkaufs in die Pensionskasse
    zu simulieren und einen Einkauf zu starten.
    
    Die in dieser Spezifikation angegebenen URLs sind nur Beispiel-URLs. Das API wird von einer
    Vielzahl von Pensionskassen implementiert und jede Pensionskasse hat eine andere Basis-URL
    für das API. Die Basis-URL der jeweiligen Pensionskasse wird vom Directory API geliefert.
    
    
    ## Einkaufsprozess
    
    Für einen freiwilligen Einkauf gelten eine Reihe von gesetzlichen Voraussetzungen, die erfüllt
    sein müssen, z.B. dass WEF-Vorbezüge zurückgezahlt wurden. Deshalb besteht der Einkaufsprozess grob aus zwei Phasen:
    
    - Prüfung: In dieser Phase wird der Antrag geprüft und bei Bedarf weitere Unterlagen von der versicherten Person eingefordert.
    
    - Zahlung: Ist der Antrag bewilligt, so macht die versicherte Person eine oder mehrere Zahlungen.
    
    
    ## Einkaufsantrag
    
    Beim Einkaufsprozess wird im ersten Schritt ein Einkaufsantrag erstellt. Er repräsentiert den nach aussen
    sichtbaren Stand der Prozessinstanz. Der interne Prozess unterscheidet sich von Pensionskasse zu Pensionskasse
    und besteht aus viel mehr Schritten als von aussen sichtbar. Der Antrag kann folgende Zustände haben, die für
    die versicherte Person und im API sichtbar sind:
    
    - In Prüfung: Die Pensionskasse ist dabei, den Antrag zu prüfen. Dies ist der erste Zustand eines neuen Antrags.
    
    - Unterlagen erforderlich: Die Prüfung hat ergeben, dass die versicherte Person weitere Unterlagen einreichen oder
      direkt mit der Pensionskasse Kontakt aufnehmen muss.
    
    - Abgelehnt: Der Einkaufsantrag wurde abgelehnt. Dies ist ein Endzustand.
    
    - Bewilligt: Der Einkaufsantrag wurde bewilligt. Die versicherte Person kann nun die Zahlungen vornehmen
      (einmalige oder wiederkehrende).
    
    - Abgeschlossen: Der Einkaufsantrag ist abgeschlossen. Eine oder mehrere Zahlungen sind erfolgt, und es sind keine
      weiteren Zahlungen mehr möglich. Dies ist ein Endzustand.
  
    Der Antrag kann über das API abgefragt werden und hat neben dem Antragszustand noch viele weitere Attribute,
    z.B. die bewilligte Einkaufssumme, die Summe der erfolgten Zahlungen etc.
    
    
    ## Fragen im Einkaufsantrag
    
    Die Einkaufsprüfung ist massgeblich durch gesetzliche Regelungen bestimmt. Dennoch gibt es Unterschiede zwischen den
    Pensionskassen. Einige stellen mehr und präzisere Fragen, andere stellen weniger Fragen und fordern schneller nach
    zusätzlichen Dokumenten oder Kontaktaufnahme.
    
    Das API deckt dies ab, indem die Pensionskasse bestimmen kann, ob gewisse Fragen überhaupt gestellt werden. Diese
    Fragen sind in der Tabelle unten als Optional markiert. Optionale Fragen sind optional für die Pensionskasse. Wird
    die Frage angezeigt, muss die versicherte Person sie beantworten. Optionale Fragen können auch benutzt werden, um
    die Fragen für die versicherte Person zu individualisieren. So kann darauf verzichtet werden, nach laufenden Renten
    zu fragen, wenn die Person noch nicht 55 Jahre alt ist.
    
    Einige Fragen hängen von anderen Fragen ab, d.h. die Fragen sind nur zu beantworten, falls bei einer anderen Frage
    eine bestimmte Antwort gegeben wurde. Diese Abhängigkeiten sind in der Tabelle unten erwähnt.
    
    Bei einigen Fragen kann die Pensionskasse einen Wert vorgeben, z.B. eine bereits bekannte Emailadresse. Dieser Wert
    wird in das Antwortfeld eingefüllt und kann von der versicherten Person bei Bedarf geändert werden.
    
    | Nr. | Frage | Typ der Antwort | Bemerkungen |
    | --- | ----- | --------------- | ----------- |
    | 1   | **Betrag** | | |
    | 1a  | Welchen Betrag möchten Sie in die Pensionskasse einzahlen? | Betrag |  |
    | 2   | **Freizügigkeitskonten oder -policen** | | |
    | 2a  | Verfügen Sie über Guthaben auf Freizügigkeitskonten bei Banken, bei der Stiftung Auffangeinrichtungen oder auf Freizügigkeitspolicen? | Ja/Nein | |
    | 3   | **Selbständige Erwerbstätigkeit** | | |
    | 3a  | Waren Sie in der Vergangenheit je selbständig erwerbstätig und haben während dieser Zeit Beiträge zugunsten der Säule 3a einbezahlt? | Ja/Nein | |
    | 3b  | Wie hoch ist das Guthaben per 31.12. des letzten Jahrs? | Betrag | Optional. Nur fragen, falls Antwort auf Frage 3a “Ja” ist. |
    | 4   | **Wohneigentum** | | |
    | 4a  | Haben Sie bei früheren Pensionskassen oder von Freizügigkeitskonten/-policen Vorbezüge getätigt und diese noch nicht vollständig zurückbezahlt? | Ja/Nein | |
    | 5   | **Zuzug aus dem Ausland** | | |
    | 5a  | Sind Sie innerhalb der letzten 5 Jahre aus dem Ausland zugezogen? (gilt auch für Schweizer Staatsangehörige) | Ja/Nein | Optional. |
    | 5b  | Wann sind Sie zugezogen? | Datum | Optional. Nur fragen, falls Antwort auf Frage 5a “Ja” ist. |
    | 5c  | Waren Sie davor bereits bei einer Schweizer Vorsorgeeinrichtung versichert? | Ja/Nein | Optional. Nur fragen, falls Antwort auf Frage 5a “Ja” ist. |
    | 5d  | Wann sind Sie zum ersten Mal einer Schweizer Vorsorgeeinrichtung beigetreten? | Datum | Optional. Nur fragen, falls Antwort auf Frage 5a “Ja” ist. |
    | 6   | **Bezug Altersrente / Kapitalauszahlung** | | |
    | 6a  | Beziehen Sie von einer Pensionskasse eine Altersrente oder haben Sie sich bereits Alterskapital auszahlen lassen? | Ja/Nein | Optional. |
    | 7   | **Weitere Fragen zur Situation** | | |
    | 7a  | Sind Sie zusätzlich bei einer anderen Vorsorgeversicherung versichert? | Ja/Nein | Optional. |
    | 7b  | Sind Sie zu 100% arbeitsfähig? | Ja/Nein | Optional. |
    | 7c  | Handelt es sich beim Einkauf um einen Wiedereinkauf nach Ehescheidung oder nach gerichtlicher Auflösung einer eingetragenen Partnerschaft? | Ja/Nein | Optional. |
    | 7d  | Wird der Einkauf mit Geld aus der Säule 3a getätigt? | Ja/Nein | Optional. |
    | 8   | **Kontaktangaben** | | |
    | 8a  | Ist Ihre Adresse <adresse> korrekt? | Ja/Nein | Optional. Die Adresse wird von der Pensionskasse geliefert und muss im Text oder separat angezeigt werden. |
    | 8b  | Unter welcher Telefonnummer dürfen wir Sie bei Fragen kontaktieren? | Telefonnummer | Optional. |
    | 8c  | Über welche Emailadresse dürfen wir Sie bei Fragen kontaktieren? | Emailadresse | Optional. |
    
    
    ## Instruktionen an die versicherte Person
    
    Ergibt die Prüfung, dass weitere Unterlagen oder eine Kontaktaufnahme mit der Pensionskasse nötig sind, so können der
    versicherten Person entsprechende Instruktionen erteilt werden. Diese können von der Pensionskasse frei formuliert werden.
    
    Die Instruktionen bestehen aus einer Liste von Sätzen. Diese werden von der Applikation als unnummerierte Liste angezeigt, z.B:
    
    - *Der Einkaufsbetrag reduziert sich um die Höhe des Guthabens auf den Freizügigkeitskonti / -policen. Bitte senden Sie uns
      Kopien von Konto-/Policienauszügen, die den Stand per Ende letzten Jahres zeigen.*
    - *Senden Sie die Dokumente an: Personalfürsorge der Firma Heierli AG, Bahnhofstrasse 13, 9000 St. Gallen.*
    - *Alternativ können Sie die Dokumente an einkauf@heierli-pk.ch senden. Bitte beachten Sie, dass Emails einen Weg über Server
      im Ausland nehmen können und die Vertraulichkeit auf dem Weg nicht gewährt ist.*
    
    Sind weitere Unterlagen nötig, so müssen diese direkt an die Pensionskasse (und nicht über die Applikation) eingereicht werden.
    Entsprechend gibt es kein API dafür.
    
    
    ## Feedback an die versicherte Person
    
    In vielen Fällen ist die Antragsprüfung nicht automatisiert und sofort erledigt. Stattdessen dauert sie Stunden oder sogar einige
    Tage. Wenn das Ergebnis vorliegt, sollte der/die AntragsstellerIn benachrichtigt werden. Dazu nutzt die Pensionskasse direkte
    Kommunikationskanäle (Email, SMS, Telefonanruf etc.)
    
    Hat die App einen eigenen Kommunikationskanal mit der versicherten Person, so kann sie regelmässig prüfen, ob sich der Status des
    Antrags verändert hat und bei einer Änderung benachrichtigen. Dieser Kanal ist freiwillig und zusätzlich zur direkten Kommunikation
    zwischen Pensionskasse und versicherter Person.
    
    
    ## Zahlungen
    
    Wurde der Einkauf über einen bestimmten Betrag bewilligt, so kann der Betrag wie folgt überwiesen werden:
    
    - **Einmalige Einzahlung mit Einzahlungsschein (QR-Rechnung)**: Die Pensionskasse stellt die Zahlungsdaten (Adresse, Kontonummer,
      Referenznummer etc.) aus, die per API an die Applikation geliefert werden.
    
    - **Einmalige Einzahlung über eBill**: Die Pensionskasse sendet eine eBill ans eBill-Konto der versicherten Person.
    
    - **Regelmässige Einzahlungen per eBill**: Es wird ein Zahlungsrhythmus vereinbart, gemäss dem die Pensionskasse eBills ans
      eBill-Konto der versicherten Person sendet.
    
    - **Unregelmässige Einzahlungen per Einzahlungsschein (QR-Rechnung)**: Die Pensionskasse stellt die Zahlungsdaten (Adresse,
      Kontonummer, Referenznummer etc.) aus, die die Applikation nutzt, um Zahlungen auszulösen, z.B. über eine E-Banking-Schnittstelle.
      Es wird für alle Zahlungen die gleiche Referenznummer verwendet.
    
    Eine Pensionskasse muss nicht alle vier Zahlungsmethoden unterstützen. Die unterstützen Zahlungsmethoden können über das API
    abgefragt werden.
    
    
    ## Simulation
    
    Die Simulation berechnet, wie hoch das Altersguthaben und die Rente mit und ohne Einkauf sein wird. Dabei können verschiedene Parameter gewählt werden:
    
    - Einkaufssumme (gesamt)
    - Pensionierungsalter
    - Betrag pro Zahlung (bei mehreren Zahlungen)
    - Zahlungsperiodizität (bei mehreren Zahlungen)
    - Datum der (ersten) Zahlung
    
    Die Simulation geht davon aus, dass die gesetzlichen Voraussetzungen für den Einkauf gegeben sind. Sie prüft, dass der maximale Einkaufsbetrag nicht überschritten wird, und passt in bei Bedarf an.
    
    
    
    # Purchases API (English)
    
    **** English (für Deutsch siehe weiter oben) ****
    
    The Purchases API can simulate the prospective effects of voluntary purchases of retirement
    benefits and initiate a purchase.
    
    The URLs in the specification are examples only. The API is implemented by a many
    pension funds and each pension fund has an individual base URL for the API.
    The base URL of a specific pension fund is provided by the directory API.
    
    
    ## Purchase Process
    
    In order to make a voluntary purchase a number of legal requirements must be fulfilled, e.g. early withdrawal of savings
    must have been paid back. Thus the purchase process consists of two phases:
    
    - Validation: In the first phase, the purchase application is validated and – if needed – additional documentation is requests from the insured person.
    
    - Payment: Once the application has been approved, the insured person makes one or several payments.
    
    
    ## Purchase Application
    
    The initial step of the purchase process is to create an application. It represent the externally visible state
    of the process instance. The internal process differs from pension fund to pension fund and likely consists
    of far more steps than are externally visible. The application can have the below states that are visible
    for the insured person and in the API:
    
    - In review: The pension fund is reviewing and validating the application. This is the initial state of a new application.
    
    - Input required: The validation requires the the insured person provides additional documents or contacts the pension fund directly.
    
    - Rejected: The application has been rejected. This is a final state.
    
    - Approved: The purchase application was approved. The insured person can now make payments (once or repeating).
    
    - Completed: The purchase application has been completed. One or more payments have been received, and no further payments
      are possible. This is a final state.
    
    The application can be queried using the API. It will return the application state and many additional attributes,
    such as the approved purchase amount, the amount of received payments.
    
    
    ## Purchase Questionnaire
    
    The purchase application validation is mainly governed by legal regulation. Nevertheless, there are differences between
    the pension funds. Some funds ask many precise questions while other funds ask few questions and quickly resort
    to requesting additional documents or direct contact.
    
    The API covers these differences as the pension fund can decide if certain questions are asked at all. These questions
    are marked as optional in the below table. Optional questions are optional for the pension fund. If the questions is
    displayed to the insured person, it must be answered. Optional questions can also be used to tailor the questionnaire
    to the insured person, e.g. by not asking whether the person is already drawing a pension if he/she is younger than 55. 
    
    Some questions depend on the answer of other question, i.e. the question is only relevant if a certain answer has been
    given to a previous question. Such dependencies are mentioned in the below table.
    
    For certain questions, the pension fund can provide an initial value, e.g. an earlier provided email address. The answer field
    will be prefilled with this value and the insured person can change it if needed.
    
    | No  | Question | Answer type | Remark |
    | --- | ----- | --------------- | ----------- |
    | 1   | **Amount** | | |
    | 1a  | What amount of payment would you like to make towards the pension fund? | Amount |  |
    | 2   | **Pillar 2 Vested Benefits** | | |
    | 2a  | Do you have any additional pillar 2 claims from vested benefits accounts, vested benefits policies or at the Foundation of the BVG Contingency Fund? | Yes/No | |
    | 3   | **Self-employment** | | |
    | 3a  | Have you ever been self-employed and paid into pillar 3a during that time? | Yes/No | |
    | 3b  | What is the pillar 3a balance as of 31 December of last year? | Amount | Optional. Will only be asked if the answer for question 3a is "Yes". |
    | 4   | **Residental property** | | |
    | 4a  | Have you made an early withdrawal of pension savings to fund the purchase of residential property and have not fully paid it back? | Yes/No | |
    | 5   | **Move to Switzerland** | | |
    | 5a  | Have you moved to Switzerland from another country during the last 5 years? (applies to Swiss citizens as well) | Yes/No | Optional. |
    | 5b  | When have you moved to Switzerland? | Date | Optional. Will only be asked if answer to question 5a is "Yes". |
    | 5c  | Have you ever joined a Swiss pillar 2 pension plan before? | Yes/No | Optional. Will only be asked if answer to question 5a is "Yes". |
    | 5d  | When have you joined a Swiss pillar 2 pension plan for the first time? | Date | Optional. Will only be asked if answer to question 5a is "Yes". |
    | 6   | **Early retirement pension / savings capital withdrawal** | | |
    | 6a  | Are you drawing a retirement pension or have you ever withdrawn retirement savings capital from a pension fund? | Yes/No | Optional. |
    | 7   | **Additional question regarding the insured person** | | |
    | 7a  | Are you currently insured in an additional pension plan? | Yes/No | Optional. |
    | 7b  | Are you fully able for work? | Yes/No | Optional. |
    | 7c  | Is the purchase made to make up for the pension savings surrender due to a divorce or a dissolution of a civil partnership?? | Yes/No | Optional. |
    | 7d  | Is the purchase made with money originating from a pillar 3a account? | Yes/No | Optional. |
    | 8   | **Contact** | | |
    | 8a  | Is your address <adresse> correct? | Yes/No | Optional. The address will be provided by the pension fund and must be displayed in the question text or nearby on the screen. |
    | 8b  | What is your phone number to contact you in case of questions? | Phone number | Optional. |
    | 8c  | What is your email address to contact you in case of questions? | Email address | Optional. |
    
    
    ## Instructions for the Insured Person
    
    If the result of the initial review is that additional documents or direct contact with the pension fund is needed,
    such instructions can be given to the insured person. The pension fund can phrase the instructions according to their needs.
    
    Structurally, the instructions are a list of sentences. The application will display them as bullet list, e.g.:
    
    - *Your purchasing potential will be reduced by your further claims from pillar 2 (vested benefits account or policy). Please
      send us a copy of the current account statement for your vested benefit accounts.*
    - *Please send the documents to: Personalfürsorge der Firma Heierli AG, Bahnhofstrasse 13, 9000 St. Gallen.*
    - *Alternatively, you can send the documents to einkauf@heierli-pk.ch. Please not that emails can take a route via servers abroad,
      and confidentially on this path cannot be guaranteed.*
    
    If additional documents are required for the purchase, they must be sent directly to the pension fund (and not via the application).
    Thus, there is no API to upload documents.
    
    
    ## Feedback to the Insured Person
    
    In many cases, the application validation is not fully automated and not immediately done. Instead, it can last hours or even days.
    Once the result is ready, the insured person should be notified. The pension fund uses direct communication channels (email, short
    text messages, phone calls etc.) for this purpose.
    
    If an application has a communication channel to the insured person, it can regularly poll if the state of the purchase application
    has changed and notify the person about changes. Such a channel is voluntary and in addition to the direct communication between
    pension fund and insured person.
    
    
    ## Payments
    
    Once the voluntary purchase has been approved, the amount can paid in one four ways:
    
    - **Single payment using a payment slip (QR bill)**: The pension fund provides the payment details (address,
      account number, reference number etc.) via API to the application used by the insured person. He/she makes
      a payment using the provided data. 
    
    - **Single payment by eBill**: The pension fund sends an eBill to the insured person's eBill account.
      The insured person provides the eBill email address via the API to the pension fund.
    
    - **Periodic payments by eBill**: The insured person chooses a payment periodicity, which is sent
      to the pension fund via the API. The pension fund will later send an eBill for each payment to
      the insured person's eBill account.
    
    - **Irregular payments using a payment slip (QR bill)**: The pension fund provides the payment details (address,
      account number, reference number etc.)  via API to the application. The application then triggers payments
      (e.g. via an E-Banking-API). All payments use the same reference number.
    
    A pension fund does not need to support a four payment methods. An application can query the supported methods
    with an API call.
    
    
    ## Simulation
    
    The simulation calculates the prospective retirement capital and pension with and without voluntary purchase.
    Several parameters of the simulation can be specified:
    
    - Purchase amount (total)
    - Pension age
    - Amount of individual payments (if several payments are made towards a purchase)
    - Payment frequency (if several payments are made towards a purchase)
    - Date of (first) payment
    
    The simulation assumes that the legal prerequisites for the purchase are fulfilled. It checks that the maximum purchase amount is not
    exceeded and modifies it if needed.


  contact:
    name: OpenPK Project / Acrea AG
    url: https://www.openpkproject.ch
    email: openpkproject@acrea.com

  license:
    name: Creative Commons Attribution 4.0 International License
    url: http://creativecommons.org/licenses/by/4.0/

  x-logo:
    url: https://api-spec-dot-acrea-openpk.appspot.com/images/openpk_hori.svg
    altText: "OpenPK"

tags:
  - name: purchase
    description: Voluntary purchase simulation and operations

servers:
  - url: 'https://openpk.ch/v1'
  
paths:

  /policies/{policyId}/purchase-simulation:
    post:
      summary: Simulate effects of voluntary purchase
      operationId: simulatePurchase
      description: |
        Simulates the financial effect of voluntary purchase of additional pension benefits
        for the provided parameters (retirement age, purchase amount etc.)

        If the specified purchase amount is higher the maximum allowed purchase amount, it will
        be reduced to the allowed amount. The simulation result contains the effective purchase amount.

        For periodic payments, the simulation assumes that the payments are made with the specified
        payment size and payment frequency until the maximum purchase amount has been exhausted or
        the retirement date has been reached (whichever is first).

        If the retirement date is reached before the purchase amount is exhausted, the returned effective
        purchase amount will be lower than both the requested and the maximum purchase amount.

        Using a very high amount (e.g. CHF 10 million), it is possible to query the maximum purchase
        amount and the maximum additional pension at once.

      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/PolicyId'
      requestBody:
        description: Voluntary purchase simulation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulationParameters'
      responses:
        '200':
          description: Simulation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulationResult'
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid policyId
          content: {}

  /policies/{policyId}/purchases/template:
    get:
      summary: Retrieves a purchase request template
      description: |
        The template purchase request serves to retrieve the configuration
        and intial values for a new purchase request.
      operationId: getTemplatePurchaseRequest
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/PolicyId'
      responses:
        '200':
          description: Purchase request with configuration and initial values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseRequest'
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId`
          content: {}

  /policies/{policyId}/purchases:
    get:
      summary: Query all purchase requests
      description: |
        Returns a list of all current and past purchase requests.
      operationId: listPurchaseRequest
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/PolicyId'
      responses:
        '200':
          description: List of purchase requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PurchaseRequest'
                description: List of purchase requests
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId`
          content: {}

    post:
      summary: Submit a new purchase request
      description: |
        Submit a new purchase request for voluntary purchase of additional pension benefits.

        The submitted data must satisfy the requirements described above,
        in particular which questions require an answer.

        The response will contain an ID that can be used to query the submitted request in the future.

      operationId: submitPurchaseRequest
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/PolicyId'
      requestBody:
        description: Voluntary purchase request details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
      responses:
        '200':
          description: Updated voluntary purchase request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseRequest'
        '400':
          description: Some of the input is incomplete or invalid for starting a request
          content: {}
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId`
          content: {}

  /policies/{policyId}/purchases/{purchaseRequestId}:
    get:
      summary: Get purchase request
      description: |
        Retrieves the current state of the specified purchase request.
      operationId: getPurchaseRequest
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/PolicyId'
        - name: purchaseRequestId
          in: path
          description: Purchase Request ID
          required: true
          schema:
            $ref: '#/components/schemas/PurchaseRequestId'
      responses:
        '200':
          description: Vvoluntary purchase request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseRequest'
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId` or `purchaseRequestId`
          content: {}

    put:
      summary: Update purchase request.
      description: |
        Updates the insured person's input in the specified purchase request.

        Updates are usually on possible if the request is in the state `inputRequired`.

      operationId: updatePurchaseRequest
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/PolicyId'
        - name: purchaseRequestId
          in: path
          description: Purchase Request ID
          required: true
          schema:
            $ref: '#/components/schemas/PurchaseRequestId'
      requestBody:
        description: Voluntary purchase request details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
      responses:
        '200':
          description: Updated voluntary purchase request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseRequest'
        '400':
          description: Some of the input is incomplete or invalid for starting a request
          content: {}
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId` or `purchaseRequestId`
          content: {}

  /policies/{policyId}/payment-methods:
    get:
      summary: Retrieves the available payment methods
      description: |
        Returns the list of methods available to make payments for
        a voluntary purchase of pension benefits.
      operationId: getPaymentMethods
      tags:
        - purchase
      parameters:
        - name: policyId
          in: path
          description: Policy ID
          required: true
          schema:
            $ref: '#/components/schemas/PolicyId'
      responses:
        '200':
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
        '401':
          description: Access token is missing or invalid
          content: {}
        '404':
          description: Invalid `policyId`
          content: {}

components:
  schemas:

    SimulationParameters:
      type: object
      description: Voluntary purchase simulation parameters
      required:
      - totalAmount
      properties:
        totalAmount:
          type: number
          description: |
            Purchase amount in CHF.
            For periodic purchases, the sum of all payments.
        retirementAge:
          type: integer
          description: |
            Planned retirement age.
            If omitted, the regular payment age is assumed.
        date:
          type: string
          format: date
          description: |
            Date of the (first) payments.
            If omitted: tomorrow.
        paymentSize:
          type: number
          description: |
            The size of individual periodic payments.
            If omitted, 0 or equal to 'amount', a one-time payment is assumed.
        paymentFrequency:
          $ref: '#/components/schemas/PaymentFrequency'
          
    SimulationResult:
      type: object
      description: Financial effect of voluntary purchase
      required:
      - maxAmount
      - amount
      - retirementAge
      - capitalWithoutPurchase
      - capitalWithPurchase
      - pensionWithoutPurchase
      - pensionWithPurchase
      properties:
        maxAmount:
          type: number
          description: Maximum allowed amount of voluntary purchase of additional pension benefits (in CHF)
        amount:
          type: number
          description: Effective amount of voluntary purchase (in CHF)
        retirementAge:
          type: integer
          description: Retirement age assumed for simulation
        capitalWithoutPurchase:
          type: number
          description: Prospective savings capital at retirement without purchase (in CHF)
        capitalWithPurchase:
          type: number
          description: Prospective savings capital at retirement with purchase (in CHF)
        pensionWithoutPurchase:
          type: number
          description: Prospective pension after retirement without purchase (in CHF per year)
        pensionWithPurchase:
          type: number
          description: Prospective pension after retirement with purchase (in CHF per year)
          
    PurchaseRequest:
      type: object
      description: |
        The *Purchase Request* object is the main data structure exchanged between application and pension fund
        during the voluntary purchase process. It is updated by the the application and the pension fund.

        The application updates:
        - purchaseDetails
        - paymentSchedule

        The pension fund updates:
        - id
        - status
        - purchaseDetails
        - requiredPurchaseDetails
        - instructions
        - paymentInstructions
        - paymentsReceived

        The application should omit the above fields. If they are part of a REST request, the pension fund
        will silently ignore them.

        The application may only update the purchase request on creation and if it is in status `inputRequired`.

        The pension fund will not update `purchaseDetails` except for minor cleanup (e.g. removing trailing whitespace)
        that does not alter the insured person's input materially. The only exception is the purchase amount, which may
        be lowered to maximum allowed amount.

      properties:
        id:
          $ref: '#/components/schemas/PurchaseRequestId'
        status:
          type: string
          description: |
            Request status (set and updated by pension fund):
              * `inReview` - Request was submitted and is in review
              * `inputRequired` - Request requires additional input from insured person
              * `rejected` - Request was rejected
              * `approved` - Request was approved and is open for payments
              * `completed` - Payment has been received and request is complete
          enum:
            - inReview
            - inputRequired
            - rejected
            - approved
            - completed
        purchaseDetails:
          $ref: '#/components/schemas/PurchaseDetails'
        requiredPurchaseDetails:
          $ref: '#/components/schemas/RequiredPurchaseDetails'
        instructions:
          $ref: '#/components/schemas/Instructions'
        paymentSchedule:
          $ref: '#/components/schemas/PaymentSchedule'
        paymentInstructions:
          $ref: '#/components/schemas/PaymentInstructions'
        paymentsReceived:
          type: number
          format: double
          minimum: 0
          description: Total amount of payments received (in CHF)

    PurchaseDetails:
      type: object
      description: |
        Input from the insured person regarding the purchase request. These are the answers to the questions
        described in detail in the introduction to this API. Most of the questions and answers are required to
        ensure the purchase amount does not exceed the maximum allowed amount.

        Some questions and answers are optional (in the sense that the pension fund does not want to ask them).
        Optional questions are not displayed to the insured person and the answer can be omitted. The question
        configuration depends on the pension fund and on the specific policy and can be found in the
        `requiredPurchaseDetails` property.

        The pension fund may set some of the properties when the empty purchase request is queried. These values
        should be used as the initial values.

      properties:
        amount:
          type: number
          format: double
          minimum: 1
          description: |
            Answer to question 1a: Requested purchase amount in CHF
        hasVestedBenefits:
          type: boolean
          description: |
            Answer to question 2a: Indicates if the insured person has pillar 2 vested benefits outside the pension fund (`true`) or not (`false`)
        hasMadeSelfEmployedContributions:
          type: boolean
          description: |
            Answer to question 3a: Indicates if the insured person has made pillar 3a contributions while being self-employed (`true`) or not (`false`)
        selfEmployedContributionCredit:
          type: number
          format: double
          minimum: 1
          description: |
            Answer to question 3b: Balance of pillar 3a credit as of the end of last year
        hasNotRepaidEarlyWithdrawal:
          type: boolean
          description: |
            Answer to question 4a: Indicates if the insured person has made an early withdrawal of savings to fund the purchase of residential property and has not repaid it fully (`true`) or not (`false`)
        hasMovedFromAbroad:
          type: boolean
          description: |
            Answer to question 5a: Indicates if the insured person has moved to Switzerland from abroad during the last 5 years (`true`) or not (`false`)
        moveFromAbroadDate:
          type: string
          format: date
          description: |
            Answert to question 5b: Date of move from another country to Switzerland
        hasBeenInsuredBefore:
          type: boolean
          description: |
            Answer to question 5c: Indicates if the person has been insured in the Swiss pension system before (`true`) or not (`false`)
        firstInsuranceDate:
          type: string
          format: date
          description: |
            Answert to question 5d: First entry date into the Swiss pension system
        isDrawingPensionBenefits:
          type: boolean
          description: |
            Answer to question 6a: Indicates if the insured person is already drawing or has ever drawn retirement benefits under another pension plan (`true`) or not (`false`)
        isInAnotherPensionPlan:
          type: boolean
          description: |
            Answer to question 7a: Indicates if the person is insured in another pension plan (`true`) or not (`false`)
        isFullyAbleToWork:
          type: boolean
          description: |
            Answer to question 7b: Indicates if the person is fully able to work (`true`) or not (`false`)
        isPurchaseAfterDivorce:
          type: boolean
          description: |
            Answer to question 7c: Indicates if the purchase is to make up for the pension savings surrender due to a divorce (`true`) or not (`false`)
        isPurchaseWithPillar3aSavings:
          type: boolean
          description: |
            Answer to question 7d: Indicates if the purchase is made with funds from a pillar 3a pension plan (`true`) or not (`false`)
        isAddressUpToDate:
          type: boolean
          description: |
            Answer to question 8a: Indicates if the postal address is up-to-date (`true`) or not (`false`)
        phoneContact:
          type: string
          description: |
            Answer to question 8b: Phone number to contact the insured person regarding the purchase request 
        emailContact:
          type: string
          description: |
            Answer to question 8c: Email address to contact the insured person regarding the purchase request 

    RequiredPurchaseDetails:
      type: object
      description: |
        Provides the configuration regarding which questions should be displayed/asked and additional data required for the questions.

      properties:
        askForSelfEmployedContributionCredit:
          type: boolean
          description: Indicates if question 3b is to be asked
        askForHasMovedFromAbroad:
          type: boolean
          description: Indicates if question 5a is to be asked
        askForMoveFromAbroadDate:
          type: boolean
          description: Indicates if question 5b is to be asked
        askForHasBeenInsuredBefore:
          type: boolean
          description: Indicates if question 5c is to be asked
        askForFirstInsuranceDate:
          type: boolean
          description: Indicates if question 5d is to be asked
        askForIsDrawingPensionBenefits:
          type: boolean
          description: Indicates if question 6a is to be asked
        askFoIsInAnotherPensionPlan:
          type: boolean
          description: Indicates if question 7a is to be asked
        askForIsFullyAbleToWork:
          type: boolean
          description: Indicates if question 7b is to be asked
        askForIsPurchaseAfterDivorce:
          type: boolean
          description: Indicates if question 7c is to be asked
        askForIsPurchaseWithPillar3aSavings:
          type: boolean
          description: Indicates if question 7d is to be asked
        askForIsAddressUpToDate:
          type: boolean
          description: Indicates if question 8a (postal address is up-to-date) is to be asked
        postalAddress:
          type: string
          description: |
            The current postal address on file.
            
            The address should be formatted in a human-readable form, ready to be displayed in the question sentence.
            Street, postal code and city, country etc. should be separated with comma and space; no newlines must be used.
        askForPhoneContact:
          type: boolean
          description: Indicates if question 8b is to be asked
        askForEmailContact:
          type: boolean
          description: Indicates if question 8c is to be asked

    PaymentSchedule:
      type: object
      description: |
        Desired payment method and payment schedule.

        `eBillAccount` is required if eBill payment method is chosen
        (`paymentMethod` = `singlePaymentEBill` or `paymentMethod` = `regularPaymentEBill`)

        `paymentFrequency` and `paymentSize` are required if regular payments is chosen
        (`paymentMethod` = `regularPaymentEBill`). Otherwise, they are ignored.

        `paymentFrequency` = 1 is invalid. Instead, one of the one-time payment methods
        should be chosen and the `paymentFrequency` property omitted.
      required:
        - paymentMethod
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentFrequency:
          $ref: '#/components/schemas/PaymentFrequency'
        paymentSize:
          type: number
          format: double
          description: |
            Size (in CHF) of individual regular payments.
        eBillAcount:
          type: string
          description: Email address of insured person's eBill account.

    PaymentInstructions:
      type: object
      description: |
        Payment instructions for to insured person to make the payment. This information will only be provided
        if the request has the state `approved` and a QR bill related payment methode has been chosen
        (`paymentMethod` = `singlePaymentQrBill` or `paymentMethod` = `irreularPaymentQrBill`).
      properties:
        qrBillText:
          type: string
          description: |
            Text that is embedded in the QR code of a QR bill. It contains the relevant payment information
            including creditor, account number and payment reference. 

            See chapter 4 "Swiss QR Code database" in 
            [SIX – Swiss Implementation Guidelines QR-bill (PDF, English)](https://www.paymentstandards.ch/dam/downloads/ig-qr-bill-de.pdf) or
            [SIX – Schweizer Implementation Guidelines QR-Rechnung (PDF, German)](https://www.paymentstandards.ch/dam/downloads/ig-qr-bill-de.pdf).


    Instructions:
      description: |
        The instructions are a list of sentences that inform the insured person either about the next steps in the process
        that are likely to happen, or – in particular in case of status `inputRequired` – about the steps the insured
        person should take.

        Instructions should be displayed in a bullet list, each array item becoming a list item.

      type: array
      items:
        description: A single instruction, display as an item in a bullet list.
        type: string

    PaymentMethod:
      type: string
      description: |
        Request status (set and updated by pension fund):
          * `singlePaymentQrBill` - A single payment must be made using the provided payment information (account number, reference no)
          * `singlePaymentEBill` - The pension fund will send a single eBill to the insured person's eBill account
          * `regularPaymentEBill` - The pension fund will send eBills to the insured person's eBill account according to the requested installments
          * `irreularPaymentQrBill` - Many payments can be made using the provided payment information (account number, reference no)
      enum:
        - singlePaymentQrBill
        - singlePaymentEBill
        - regularPaymentEBill
        - irreularPaymentQrBill
    
    PaymentFrequency:
      type: integer
      description: | 
        Number of payments per year.
        Possible values:
          * 0: One-time payment
          * 1: Annual payment
          * 2: Semi-annual payment
          * 4: Quarterly payment
          * 12: Monthly payment

    PolicyId:
      type: string
      pattern: '[A-Za-z0-9_\-.~]{1,64}'
      description: Technical ID of policy used in API calls

    PurchaseRequestId:
      type: string
      pattern: '[A-Za-z0-9_\-.~]{1,64}'
      description: Technical ID of purchase request used in API calls

  securitySchemes:
    bearerAuthentication:
      type: http
      description: Bearer access token in HTTP header
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuthentication: []
